"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeView = void 0;
var adaptivecards_controls_1 = require("adaptivecards-controls");
var TreeView = /** @class */ (function () {
    function TreeView(rootItem) {
        this.rootItem = rootItem;
        this._selectedItem = undefined;
    }
    TreeView.prototype.setupTreeItemEvents = function (treeItem) {
        var _this = this;
        treeItem.onSelectedChange = function (sender) {
            _this.selectedItem = sender;
        };
        treeItem.onItemInvoked = function (treeItem) {
            _this.itemInvoked(treeItem);
        };
        for (var i = 0; i < treeItem.getChildCount(); i++) {
            this.setupTreeItemEvents(treeItem.getChildAt(i));
        }
    };
    TreeView.prototype.getVisibleTreeItems = function () {
        var _a, _b;
        // get all treeitem nodes in this view
        var treeItems = Array.from((_b = (_a = this.rootItem) === null || _a === void 0 ? void 0 : _a.renderedElement) === null || _b === void 0 ? void 0 : _b.querySelectorAll(":scope [role='treeitem']"));
        // filter out any hidden nodes (i.e. collapsed children). `[role='tree']` here is to prevent
        // looking outside of the tree.
        return treeItems === null || treeItems === void 0 ? void 0 : treeItems.filter(function (el) { var _a; return !((_a = el.parentElement.closest(".acd-hidden, [role='tree']")) === null || _a === void 0 ? void 0 : _a.classList.contains("acd-hidden")); });
    };
    TreeView.moveFocus = function (from, to) {
        to.tabIndex = 0;
        to.focus();
        from.tabIndex = -1;
    };
    TreeView.prototype.selectedItemChanged = function () {
        if (this.onSelectedItemChanged) {
            this.onSelectedItemChanged(this);
        }
    };
    TreeView.prototype.itemInvoked = function (sender) {
        if (this.onItemInvoked) {
            this.onItemInvoked(sender);
        }
    };
    TreeView.prototype.focus = function () {
        var _a;
        (_a = this.rootItem) === null || _a === void 0 ? void 0 : _a.focus();
    };
    TreeView.prototype.render = function () {
        var _this = this;
        var treeRoot = document.createElement("ul");
        treeRoot.style.paddingLeft = "0";
        treeRoot.style.listStyleType = "none";
        treeRoot.className = "acd-treeView";
        treeRoot.setAttribute("role", "tree");
        treeRoot.onkeydown = function (e) {
            var currentElement = e.target;
            var handled = true;
            switch (e.key) {
                case adaptivecards_controls_1.Constants.keys.up: {
                    var treeItems = _this.getVisibleTreeItems();
                    var index = treeItems.findIndex(function (el) { return el === currentElement; });
                    if (index > 0) {
                        var nextElement = treeItems.at(index - 1);
                        TreeView.moveFocus(currentElement, nextElement);
                    }
                    else {
                        // on first child of tree root, so pressing up should focus the root
                        TreeView.moveFocus(currentElement, _this.rootItem.renderedElement);
                    }
                    break;
                }
                case adaptivecards_controls_1.Constants.keys.down: {
                    var treeItems = _this.getVisibleTreeItems();
                    var index = treeItems.findIndex(function (el) { return el === currentElement; });
                    if (index + 1 < treeItems.length) {
                        var nextElement = treeItems.at(index + 1);
                        TreeView.moveFocus(currentElement, nextElement);
                    }
                    break;
                }
                default: {
                    handled = false;
                }
            }
            if (handled) {
                e.cancelBubble = true;
                e.preventDefault();
            }
        };
        var rootItemElement = this.rootItem.render();
        rootItemElement.tabIndex = 0;
        treeRoot.appendChild(rootItemElement);
        this.setupTreeItemEvents(this.rootItem);
        return treeRoot;
    };
    Object.defineProperty(TreeView.prototype, "selectedItem", {
        get: function () {
            return this._selectedItem;
        },
        set: function (value) {
            if (value !== this._selectedItem) {
                if (this._selectedItem) {
                    this._selectedItem.isSelected = false;
                }
                this._selectedItem = value;
                if (this._selectedItem) {
                    this._selectedItem.isSelected = true;
                }
                this.selectedItemChanged();
            }
        },
        enumerable: false,
        configurable: true
    });
    return TreeView;
}());
exports.TreeView = TreeView;
//# sourceMappingURL=tree-view.js.map