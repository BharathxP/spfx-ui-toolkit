import React__default, { useCallback, useMemo, useRef, useState, useEffect, createElement, Fragment, Children, isValidElement, cloneElement, memo } from 'react';
import { tokens, Card as Card$1, CardPreview, CardHeader, mergeClasses, CardFooter, Subtitle2, Button, makeStyles, shorthands, Caption1, Spinner, Overflow, FluentProvider, OverflowItem, useOverflowMenu, IdPrefixProvider, Menu, MenuTrigger, MenuButton, MenuPopover, MenuList, useIsOverflowItemVisible, MenuItem, Skeleton, SkeletonItem, createTableColumn, Body1Strong, TableCellLayout, DataGridBody, DataGridRow, DataGridCell, DataGrid as DataGrid$1, DataGridHeader, DataGridHeaderCell, Field, Dropdown, Option, Dialog, DialogSurface, DialogTitle, DialogBody, DialogContent, DialogActions, Subtitle1, Body1, Text, Divider, Badge, useId, Popover, PopoverTrigger, PopoverSurface, Body2, MenuItemRadio, webLightTheme } from '@fluentui/react-components';
import { ResizeObserver } from '@juggle/resize-observer';
import { enCA, enGB, enUS, bg, de, es, fi, fr, hr, hu, it, lt, lv, nl, pl, pt, ro, ru, sl, sk, sr, tr, nlBE, zhTW, zhCN, ca, cs, da, el, et, gl, ja, nb, sv, vi } from 'date-fns/locale';
import { formatDistance, formatRelative, format as format$1, parseISO, startOfDay, endOfDay, isWithinInterval, isSameDay, addDays, isToday, startOfWeek, startOfMonth } from 'date-fns';
import { utcToZonedTime, zonedTimeToUtc, format } from 'date-fns-tz';
import { find, isEmpty, debounce as debounce$1 } from 'lodash-es';
import useEmblaCarousel from 'embla-carousel-react';
import { ChevronLeftRegular, ChevronRightRegular, bundleIcon, MoreHorizontalFilled, MoreHorizontalRegular, CheckmarkCircle12Filled, Warning12Filled, ErrorCircle12Filled, Dismiss24Regular, Info32Regular, CheckmarkCircle32Regular, CalendarDayFilled, CalendarDayRegular, CalendarMonthFilled, CalendarMonthRegular, CalendarWorkWeekFilled, CalendarWorkWeekRegular, ArrowDownFilled, ArrowDownRegular, ArrowUpFilled, ArrowUpRegular, CalendarTodayRegular } from '@fluentui/react-icons';
import { css } from '@emotion/css';
import { Icon } from '@iconify/react';
import { createPortal } from 'react-dom';
import { v4 } from 'uuid';
import { Button as Button$1 } from '@fluentui/react-button';
import { Calendar, DateRangeType } from '@fluentui/react-calendar-compat';
import { Tooltip } from '@fluentui/react-tooltip';

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function () {
      return o >= r.length ? {
        done: !0
      } : {
        done: !1,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e.includes(n)) continue;
    t[n] = r[n];
  }
  return t;
}
function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useDateFnsLocales = function useDateFnsLocales() {
  var localeMapping = {
    "en-CA": enCA,
    "en-GB": enGB,
    "en-US": enUS,
    "bg-BG": bg,
    "de-DE": de,
    "es-ES": es,
    "fi-FI": fi,
    "fr-FR": fr,
    "hr-HR": hr,
    "hu-HU": hu,
    "it-IT": it,
    "lt-LT": lt,
    "lv-LV": lv,
    "nl-NL": nl,
    "pl-PL": pl,
    "pt-PT": pt,
    "ro-RO": ro,
    "ru-RU": ru,
    "sl-SI": sl,
    "sk-SK": sk,
    "sr-SR": sr,
    "tr-TR": tr,
    "nl-BE": nlBE,
    "zh-TW": zhTW,
    "zh-CN": zhCN,
    "ca-ES": ca,
    "cs-CZ": cs,
    "da-DK": da,
    "de-CH": de,
    "el-GR": el,
    "es-ES_tradnl": es,
    "es-AR": es,
    "et-EE": et,
    "gl-ES": gl,
    "ja-JP": ja,
    "nb-NO": nb,
    "sv-FI": sv,
    "sv-SE": sv,
    "vi-VN": vi
  };
  var getLocaleFromCultureName = function getLocaleFromCultureName(cultureName) {
    if (!!cultureName) {
      var locale = localeMapping[cultureName];
      if (!!locale) {
        return locale;
      } else {
        console.error("[LocaleHelper.getLocaleFromCultureName()] => Cannot find module for locale: " + cultureName);
        return null;
      }
    } else {
      return null;
    }
  };
  return {
    getLocaleFromCultureName: getLocaleFromCultureName
  };
};

var SpToIanaTimeZoneMapping = [
	{
		IANATimeZone: "Europe/London",
		SPTimeZone: "(UTC) Dublin, Edinburgh, Lisbon, London",
		ID: 1,
		OutlookTimeZone: "GMT Standard Time"
	},
	{
		IANATimeZone: "Europe/Paris",
		SPTimeZone: "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
		ID: 3,
		OutlookTimeZone: "Romance Standard Time"
	},
	{
		IANATimeZone: "Europe/Berlin",
		SPTimeZone: "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
		ID: 4,
		OutlookTimeZone: "W. Europe Standard Time"
	},
	{
		IANATimeZone: "Europe/Bucharest",
		SPTimeZone: "(UTC+02:00) Athens, Bucharest, Istanbul",
		ID: 5,
		OutlookTimeZone: "GTB Standard Time"
	},
	{
		IANATimeZone: "Europe/Budapest",
		SPTimeZone: "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
		ID: 6,
		OutlookTimeZone: "Central Europe Standard Time"
	},
	{
		IANATimeZone: "Europe/Kaliningrad",
		SPTimeZone: "(UTC+02:00) Minsk",
		ID: 7,
		OutlookTimeZone: "Kaliningrad Standard Time"
	},
	{
		IANATimeZone: "America/Sao_Paulo",
		SPTimeZone: "(UTC-03:00) Brasilia",
		ID: 8,
		OutlookTimeZone: "E. South America Standard Time"
	},
	{
		IANATimeZone: "America/Halifax",
		SPTimeZone: "(UTC-04:00) Atlantic Time (Canada)",
		ID: 9,
		OutlookTimeZone: "Atlantic Standard Time"
	},
	{
		IANATimeZone: "America/New_York",
		SPTimeZone: "(UTC-05:00) Eastern Time (US and Canada)",
		ID: 10,
		OutlookTimeZone: "Eastern Standard Time"
	},
	{
		IANATimeZone: "America/Chicago",
		SPTimeZone: "(UTC-06:00) Central Time (US and Canada)",
		ID: 11,
		OutlookTimeZone: "Central Standard Time"
	},
	{
		IANATimeZone: "America/Denver",
		SPTimeZone: "(UTC-07:00) Mountain Time (US and Canada)",
		ID: 12,
		OutlookTimeZone: "Mountain Standard Time"
	},
	{
		IANATimeZone: "America/Los_Angeles",
		SPTimeZone: "(UTC-08:00) Pacific Time (US and Canada)",
		ID: 13,
		OutlookTimeZone: "Pacific Standard Time"
	},
	{
		IANATimeZone: "America/Anchorage",
		SPTimeZone: "(UTC-09:00) Alaska",
		ID: 14,
		OutlookTimeZone: "Alaskan Standard Time"
	},
	{
		IANATimeZone: "Pacific/Honolulu",
		SPTimeZone: "(UTC-10:00) Hawaii",
		ID: 15,
		OutlookTimeZone: "Hawaiian Standard Time"
	},
	{
		IANATimeZone: "Pacific/Apia",
		SPTimeZone: "(UTC-11:00) Midway Island, Samoa",
		ID: 16,
		OutlookTimeZone: "Samoa Standard Time"
	},
	{
		IANATimeZone: "Pacific/Auckland",
		SPTimeZone: "(UTC+12:00) Auckland, Wellington",
		ID: 17,
		OutlookTimeZone: "New Zealand Standard Time"
	},
	{
		IANATimeZone: "Australia/Brisbane",
		SPTimeZone: "(UTC+10:00) Brisbane",
		ID: 18,
		OutlookTimeZone: "E. Australia Standard Time"
	},
	{
		IANATimeZone: "Australia/Adelaide",
		SPTimeZone: "(UTC+09:30) Adelaide",
		ID: 19,
		OutlookTimeZone: "Cen. Australia Standard Time"
	},
	{
		IANATimeZone: "Asia/Tokyo",
		SPTimeZone: "(UTC+09:00) Osaka, Sapporo, Tokyo",
		ID: 20,
		OutlookTimeZone: "Tokyo Standard Time"
	},
	{
		IANATimeZone: "Asia/Singapore",
		SPTimeZone: "(UTC+08:00) Kuala Lumpur, Singapore",
		ID: 21,
		OutlookTimeZone: "Singapore Standard Time"
	},
	{
		IANATimeZone: "Asia/Bangkok",
		SPTimeZone: "(UTC+07:00) Bangkok, Hanoi, Jakarta",
		ID: 22,
		OutlookTimeZone: "SE Asia Standard Time"
	},
	{
		IANATimeZone: "Asia/Kolkata",
		SPTimeZone: "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
		ID: 23,
		OutlookTimeZone: "India Standard Time"
	},
	{
		IANATimeZone: "Asia/Dubai",
		SPTimeZone: "(UTC+04:00) Abu Dhabi, Muscat",
		ID: 24,
		OutlookTimeZone: "Arabian Standard Time"
	},
	{
		IANATimeZone: "Asia/Tehran",
		SPTimeZone: "(UTC+03:30) Tehran",
		ID: 25,
		OutlookTimeZone: "Iran Standard Time"
	},
	{
		IANATimeZone: "Asia/Baghdad",
		SPTimeZone: "(UTC+03:00) Baghdad",
		ID: 26,
		OutlookTimeZone: "Arabic Standard Time"
	},
	{
		IANATimeZone: "Asia/Jerusalem",
		SPTimeZone: "(UTC+02:00) Jerusalem",
		ID: 27,
		OutlookTimeZone: "Israel Standard Time"
	},
	{
		IANATimeZone: "America/St_Johns",
		SPTimeZone: "(UTC-03:30) Newfoundland and Labrador",
		ID: 28,
		OutlookTimeZone: "Newfoundland Standard Time"
	},
	{
		IANATimeZone: "Atlantic/Azores",
		SPTimeZone: "(UTC-01:00) Azores",
		ID: 29,
		OutlookTimeZone: "Azores Standard Time"
	},
	{
		IANATimeZone: "Etc/GMT+2",
		SPTimeZone: "(UTC-02:00) Mid-Atlantic",
		ID: 30,
		OutlookTimeZone: "Mid-Atlantic Standard Time"
	},
	{
		IANATimeZone: "Atlantic/Reykjavik",
		SPTimeZone: "(UTC) Monrovia, Reykjavik",
		ID: 31,
		OutlookTimeZone: "Greenwich Standard Time"
	},
	{
		IANATimeZone: "America/Cayenne",
		SPTimeZone: "(UTC-03:00) Cayenne",
		ID: 32,
		OutlookTimeZone: "SA Eastern Standard Time"
	},
	{
		IANATimeZone: "America/La_Paz",
		SPTimeZone: "(UTC-04:00) Georgetown, La Paz, San Juan",
		ID: 33,
		OutlookTimeZone: "SA Western Standard Time"
	},
	{
		IANATimeZone: "America/Indianapolis",
		SPTimeZone: "(UTC-05:00) Indiana (East)",
		ID: 34,
		OutlookTimeZone: "US Eastern Standard Time"
	},
	{
		IANATimeZone: "America/Bogota",
		SPTimeZone: "(UTC-05:00) Bogota, Lima, Quito",
		ID: 35,
		OutlookTimeZone: "SA Pacific Standard Time"
	},
	{
		IANATimeZone: "America/Regina",
		SPTimeZone: "(UTC-06:00) Saskatchewan",
		ID: 36,
		OutlookTimeZone: "Canada Central Standard Time"
	},
	{
		IANATimeZone: "America/Mexico_City",
		SPTimeZone: "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
		ID: 37,
		OutlookTimeZone: "Mexico Standard Time"
	},
	{
		IANATimeZone: "America/Phoenix",
		SPTimeZone: "(UTC-07:00) Arizona",
		ID: 38,
		OutlookTimeZone: "US Mountain Standard Time"
	},
	{
		IANATimeZone: "Etc/GMT+12",
		SPTimeZone: "(UTC-12:00) International Date Line West",
		ID: 39,
		OutlookTimeZone: "Dateline Standard Time"
	},
	{
		IANATimeZone: "Pacific/Fiji",
		SPTimeZone: "(UTC+12:00) Fiji Is., Marshall Is.",
		ID: 40,
		OutlookTimeZone: "Fiji Standard Time"
	},
	{
		IANATimeZone: "Asia/Magadan",
		SPTimeZone: "(UTC+11:00) Magadan, Solomon Is., New Caledonia",
		ID: 41,
		OutlookTimeZone: "Magadan Standard Time"
	},
	{
		IANATimeZone: "Australia/Hobart",
		SPTimeZone: "(UTC+10:00) Hobart",
		ID: 42,
		OutlookTimeZone: "Tasmania Standard Time"
	},
	{
		IANATimeZone: "Pacific/Port_Moresby",
		SPTimeZone: "(UTC+10:00) Guam, Port Moresby",
		ID: 43,
		OutlookTimeZone: "West Pacific Standard Time"
	},
	{
		IANATimeZone: "Australia/Darwin",
		SPTimeZone: "(UTC+09:30) Darwin",
		ID: 44,
		OutlookTimeZone: "AUS Central Standard Time"
	},
	{
		IANATimeZone: "Asia/Shanghai",
		SPTimeZone: "(UTC+08:00) Beijing, Chongqing, Hong Kong S.A.R., Urumqi",
		ID: 45,
		OutlookTimeZone: "China Standard Time"
	},
	{
		IANATimeZone: "Asia/Novosibirsk",
		SPTimeZone: "(UTC+06:00) Novosibirsk",
		ID: 46,
		OutlookTimeZone: "N. Central Asia Standard Time"
	},
	{
		IANATimeZone: "Asia/Tashkent",
		SPTimeZone: "(UTC+05:00) Tashkent",
		ID: 47,
		OutlookTimeZone: "Central Asia Standard Time"
	},
	{
		IANATimeZone: "Asia/Kabul",
		SPTimeZone: "(UTC+04:30) Kabul",
		ID: 48,
		OutlookTimeZone: "Afghanistan Standard Time"
	},
	{
		IANATimeZone: "Africa/Cairo",
		SPTimeZone: "(UTC+02:00) Cairo",
		ID: 49,
		OutlookTimeZone: "Egypt Standard Time"
	},
	{
		IANATimeZone: "Africa/Johannesburg",
		SPTimeZone: "(UTC+02:00) Harare, Pretoria",
		ID: 50,
		OutlookTimeZone: "South Africa Standard Time"
	},
	{
		IANATimeZone: "Europe/Moscow",
		SPTimeZone: "(UTC+03:00) Moscow, St. Petersburg, Volgograd",
		ID: 51,
		OutlookTimeZone: "Russian Standard Time"
	},
	{
		IANATimeZone: "Atlantic/Cape_Verde",
		SPTimeZone: "(UTC-01:00) Cape Verde Is.",
		ID: 53,
		OutlookTimeZone: "Cape Verde Standard Time"
	},
	{
		IANATimeZone: "Asia/Baku",
		SPTimeZone: "(UTC+04:00) Baku",
		ID: 54,
		OutlookTimeZone: "Azerbaijan Standard Time"
	},
	{
		IANATimeZone: "America/Guatemala",
		SPTimeZone: "(UTC-06:00) Central America",
		ID: 55,
		OutlookTimeZone: "Central America Standard Time"
	},
	{
		IANATimeZone: "Africa/Nairobi",
		SPTimeZone: "(UTC+03:00) Nairobi",
		ID: 56,
		OutlookTimeZone: "E. Africa Standard Time"
	},
	{
		IANATimeZone: "Europe/Warsaw",
		SPTimeZone: "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
		ID: 57,
		OutlookTimeZone: "W. Europe Standard Time"
	},
	{
		IANATimeZone: "Asia/Yekaterinburg",
		SPTimeZone: "(UTC+05:00) Ekaterinburg",
		ID: 58,
		OutlookTimeZone: "Ekaterinburg Standard Time"
	},
	{
		IANATimeZone: "Europe/Kiev",
		SPTimeZone: "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
		ID: 59,
		OutlookTimeZone: "FLE Standard Time"
	},
	{
		IANATimeZone: "America/Godthab",
		SPTimeZone: "(UTC-03:00) Greenland",
		ID: 60,
		OutlookTimeZone: "Greenland Standard Time"
	},
	{
		IANATimeZone: "Asia/Rangoon",
		SPTimeZone: "(UTC+06:30) Yangon (Rangoon)",
		ID: 61
	},
	{
		IANATimeZone: "Asia/Katmandu",
		SPTimeZone: "(UTC+05:45) Kathmandu",
		ID: 62,
		OutlookTimeZone: "Nepal Standard Time"
	},
	{
		IANATimeZone: "Asia/Irkutsk",
		SPTimeZone: "(UTC+08:00) Irkutsk",
		ID: 63,
		OutlookTimeZone: "North Asia East Standard Time"
	},
	{
		IANATimeZone: "Asia/Krasnoyarsk",
		SPTimeZone: "(UTC+07:00) Krasnoyarsk",
		ID: 64,
		OutlookTimeZone: "North Asia Standard Time"
	},
	{
		IANATimeZone: "America/Santiago",
		SPTimeZone: "(UTC-04:00) Santiago",
		ID: 65,
		OutlookTimeZone: "Pacific SA Standard Time"
	},
	{
		IANATimeZone: "Asia/Colombo",
		SPTimeZone: "(UTC+05:30) Sri Jayawardenepura",
		ID: 66,
		OutlookTimeZone: "Sri Lanka Standard Time"
	},
	{
		IANATimeZone: "Pacific/Tongatapu",
		SPTimeZone: "(UTC+13:00) Nuku'alofa",
		ID: 67,
		OutlookTimeZone: "Tonga Standard Time"
	},
	{
		IANATimeZone: "Asia/Vladivostok",
		SPTimeZone: "(UTC+10:00) Vladivostok",
		ID: 68,
		OutlookTimeZone: "Vladivostok Standard Time"
	},
	{
		IANATimeZone: "Africa/Lagos",
		SPTimeZone: "(UTC+01:00) West Central Africa",
		ID: 69,
		OutlookTimeZone: "W. Central Africa Standard Time"
	},
	{
		IANATimeZone: "Asia/Yakutsk",
		SPTimeZone: "(UTC+09:00) Yakutsk",
		ID: 70,
		OutlookTimeZone: "Yakutsk Standard Time"
	},
	{
		IANATimeZone: "Asia/Almaty",
		SPTimeZone: "(UTC+06:00) Astana, Dhaka",
		ID: 71,
		OutlookTimeZone: "Central Asia Standard Time"
	},
	{
		IANATimeZone: "Asia/Seoul",
		SPTimeZone: "(UTC+09:00) Seoul",
		ID: 72,
		OutlookTimeZone: "Korea Standard Time"
	},
	{
		IANATimeZone: "Australia/Perth",
		SPTimeZone: "(UTC+08:00) Perth",
		ID: 73,
		OutlookTimeZone: "W. Australia Standard Time"
	},
	{
		IANATimeZone: "Asia/Riyadh",
		SPTimeZone: "(UTC+03:00) Kuwait, Riyadh",
		ID: 74,
		OutlookTimeZone: "Arab Standard Time"
	},
	{
		IANATimeZone: "Asia/Taipei",
		SPTimeZone: "(UTC+08:00) Taipei",
		ID: 75,
		OutlookTimeZone: "Taipei Standard Time"
	},
	{
		IANATimeZone: "Australia/Sydney",
		SPTimeZone: "(UTC+10:00) Canberra, Melbourne, Sydney",
		ID: 76,
		OutlookTimeZone: "AUS Eastern Standard Time"
	},
	{
		IANATimeZone: "America/Chihuahua",
		SPTimeZone: "(UTC-07:00) Chihuahua, La Paz, Mazatlan",
		ID: 77,
		OutlookTimeZone: "Mountain Standard Time (Mexico)"
	},
	{
		IANATimeZone: "America/Santa_Isabel",
		SPTimeZone: "(UTC-08:00) Tijuana, Baja California",
		ID: 78,
		OutlookTimeZone: "Pacific Standard Time (Mexico)"
	},
	{
		IANATimeZone: "Asia/Amman",
		SPTimeZone: "(UTC+02:00) Amman",
		ID: 79,
		OutlookTimeZone: "Jordan Standard Time"
	},
	{
		IANATimeZone: "Asia/Beirut",
		SPTimeZone: "(UTC+02:00) Beirut",
		ID: 80,
		OutlookTimeZone: "Middle East Standard Time"
	},
	{
		IANATimeZone: "America/Manaus",
		SPTimeZone: "(UTC-04:00) Manaus",
		ID: 81,
		OutlookTimeZone: "SA Western Standard Time"
	},
	{
		IANATimeZone: "Asia/Tbilisi",
		SPTimeZone: "(UTC+04:00) Tbilisi",
		ID: 82,
		OutlookTimeZone: "Georgian Standard Time"
	},
	{
		IANATimeZone: "Africa/Windhoek",
		SPTimeZone: "(UTC+02:00) Windhoek",
		ID: 83,
		OutlookTimeZone: "Namibia Standard Time"
	},
	{
		IANATimeZone: "Asia/Yerevan",
		SPTimeZone: "(UTC+04:00) Yerevan",
		ID: 84,
		OutlookTimeZone: "Caucasus Standard Time"
	},
	{
		IANATimeZone: "America/Buenos_Aires",
		SPTimeZone: "(UTC-03:00) Buenos Aires",
		ID: 85,
		OutlookTimeZone: "Argentina Standard Time"
	},
	{
		IANATimeZone: "Africa/Casablanca",
		SPTimeZone: "(UTC) Casablanca",
		ID: 86,
		OutlookTimeZone: "Morocco Standard Time"
	},
	{
		IANATimeZone: "Asia/Karachi",
		SPTimeZone: "(UTC+05:00) Islamabad, Karachi",
		ID: 87,
		OutlookTimeZone: "Pakistan Standard Time"
	},
	{
		IANATimeZone: "America/Caracas",
		SPTimeZone: "(UTC-04:30) Caracas",
		ID: 88,
		OutlookTimeZone: "Venezuela Standard Time"
	},
	{
		IANATimeZone: "Indian/Mauritius",
		SPTimeZone: "(UTC+04:00) Port Louis",
		ID: 89,
		OutlookTimeZone: "Mauritius Standard Time"
	},
	{
		IANATimeZone: "America/Montevideo",
		SPTimeZone: "(UTC-03:00) Montevideo",
		ID: 90,
		OutlookTimeZone: "Montevideo Standard Time"
	},
	{
		IANATimeZone: "America/Asuncion",
		SPTimeZone: "(UTC-04:00) Asuncion",
		ID: 91,
		OutlookTimeZone: "Paraguay Standard Time"
	},
	{
		IANATimeZone: "Asia/Kamchatka",
		SPTimeZone: "(UTC+12:00) Petropavlovsk-Kamchatsky",
		ID: 92,
		OutlookTimeZone: "Kamchatka Standard Time"
	},
	{
		IANATimeZone: "UTC",
		SPTimeZone: "(UTC) Coordinated Universal Time",
		ID: 93,
		OutlookTimeZone: "UTC"
	},
	{
		IANATimeZone: "Asia/Ulaanbaatar",
		SPTimeZone: "(UTC+08:00) Ulaanbaatar",
		ID: 94,
		OutlookTimeZone: "Ulaanbaatar Standard Time"
	},
	{
		IANATimeZone: "Etc/GMT+11",
		SPTimeZone: "(UTC-11:00) Coordinated Universal Time-11",
		ID: 95,
		OutlookTimeZone: "UTC-11"
	},
	{
		IANATimeZone: "Etc/GMT+2",
		SPTimeZone: "(UTC-02:00) Coordinated Universal Time-02",
		ID: 96,
		OutlookTimeZone: "UTC-02"
	},
	{
		IANATimeZone: "Etc/GMT-12",
		SPTimeZone: "(UTC+12:00) Coordinated Universal Time+12",
		ID: 97,
		OutlookTimeZone: "UTC+12"
	},
	{
		IANATimeZone: "Asia/Damascus",
		SPTimeZone: "(UTC+02:00) Damascus",
		ID: 98,
		OutlookTimeZone: "Syria Standard Time"
	},
	{
		IANATimeZone: "Asia/Magadan",
		SPTimeZone: "(UTC+12:00) Magadan",
		ID: 99,
		OutlookTimeZone: "Magadan Standard Time"
	},
	{
		IANATimeZone: "Europe/Kaliningrad",
		SPTimeZone: "(UTC+03:00) Kaliningrad, Minsk",
		ID: 100,
		OutlookTimeZone: "Kaliningrad Standard Time"
	},
	{
		IANATimeZone: "Europe/Istanbul",
		SPTimeZone: "(UTC+02:00) Istanbul",
		ID: 101,
		OutlookTimeZone: "Turkey Standard Time"
	},
	{
		IANATimeZone: "Asia/Dhaka",
		SPTimeZone: "(UTC+06:00) Dhaka",
		ID: 102,
		OutlookTimeZone: "Bangladesh Standard Time"
	},
	{
		IANATimeZone: "America/Bahia",
		SPTimeZone: "(UTC-03:00) Salvador",
		ID: 103,
		OutlookTimeZone: "Bahia Standard Time"
	}
];

var useTimeZoneHelper = function useTimeZoneHelper() {
  var _useDateFnsLocales = useDateFnsLocales(),
    getLocaleFromCultureName = _useDateFnsLocales.getLocaleFromCultureName;
  /**
   * Guess browser's time zone using the Internationalization API (Intl.DateTimeFormat().resolvedOptions().timeZone) in supported browsers
   * @warning It may not be work for legacy browsers.
   */
  var guessBrowserTimeZone = function guessBrowserTimeZone() {
    try {
      return Intl.DateTimeFormat().resolvedOptions().timeZone.toString();
    } catch (error) {
      console.error("[getBrowserTimeZone()] => Could not determine browser's time zone as the Internalization API is not supported by the browser.");
      return null;
    }
  };
  /**
   * Get IANA time zone for the corresponding SharePoint time zone
   */
  var getIANATimeZone = function getIANATimeZone(spTimeZoneId) {
    var tzMapping = find(SpToIanaTimeZoneMapping, function (tz) {
      return tz.ID === spTimeZoneId;
    });
    var ianaTimeZone = !!tzMapping ? tzMapping.IANATimeZone : null;
    return ianaTimeZone || ""; // Provide a default value in case ianaTimeZone is null
  };
  var getIANATimeZoneFromOutlookTimeZone = function getIANATimeZoneFromOutlookTimeZone(outlookTimezone) {
    var tzMapping = find(SpToIanaTimeZoneMapping, function (tz) {
      return tz.OutlookTimeZone === outlookTimezone;
    });
    var ianaTimeZone = !!tzMapping ? tzMapping.IANATimeZone : null;
    return ianaTimeZone || ""; // Provide a default value in case ianaTimeZone is null
  };
  var getTimeZone = function getTimeZone(timeZoneId) {
    if (typeof timeZoneId === "number") {
      return getIANATimeZone(timeZoneId);
    } else {
      return getIANATimeZoneFromOutlookTimeZone(timeZoneId);
    }
  };
  /**
   * Get a date/time representing local time in a given time zone from the UTC date
   */
  var utcToZonedTime$1 = function utcToZonedTime$1(date, timeZoneId) {
    var timeZone = getTimeZone(timeZoneId);
    if (!timeZone) {
      throw Error("[utcToZonedTime()] => Could not map specified SharePoint time zone with corresponding IANA time zone.");
    }
    return utcToZonedTime(date, timeZone);
  };
  /**
   * Given a date and any time zone, returns a Date with the equivalent UTC time.
   */
  var zonedTimeToUtc$1 = function zonedTimeToUtc$1(date, timeZoneId) {
    var timeZone = getTimeZone(timeZoneId);
    if (!timeZone) {
      throw Error("[zonedTimeToUtc()] => Could not map specified SharePoint time zone with corresponding IANA time zone.");
    }
    return zonedTimeToUtc(date, timeZone);
  };
  /**
   * Formats a date to a string showing time for a specific time zone, which can be different from the system time zone.
   */
  var formatUtcToZonedTime = function formatUtcToZonedTime(isoDateString, spTimeZoneId, format$1, cultureName) {
    var utcDate = new Date(isoDateString);
    var timeZone = getTimeZone(spTimeZoneId);
    if (!timeZone) {
      throw Error("[formatUtcToZonedTime()] => Could not map specified SharePoint time zone with corresponding IANA time zone.");
    }
    var locale = !!cultureName ? getLocaleFromCultureName(cultureName) : undefined;
    // To format a date to a string showing time for a specific time zone, which can be different from the system time zone, the format function can be combined with utcToZonedTime.
    var zonedTime = utcToZonedTime(utcDate, timeZone);
    // The format function will never change the underlying date, it must be changed to a zoned time before passing it to format.
    // Since a zoned time `Date` instance cannot convey the time zone information to the format function it is necessary to pass the same timeZone value as an option on the third argument of format.
    return format(zonedTime, format$1, {
      timeZone: timeZone,
      locale: locale
    });
  };
  var getDateDistanceToNow = function getDateDistanceToNow(utcDate, timeZoneId, cultureName, addSufix) {
    var timeZone = getTimeZone(timeZoneId);
    if (!timeZone) {
      throw Error("[formatUtcToZonedTime()] => Could not map specified SharePoint time zone with corresponding IANA time zone.");
    }
    var zonedTime = utcToZonedTime(utcDate, timeZone);
    var locale = !!cultureName ? getLocaleFromCultureName(cultureName) : undefined;
    return formatDistance(zonedTime, new Date(), {
      addSuffix: addSufix != null ? addSufix : true,
      locale: locale
    });
  };
  var getFormatRelative = function getFormatRelative(utcDate, timeZoneId, cultureName) {
    var timeZone = getTimeZone(timeZoneId);
    if (!timeZone) {
      throw Error("[getFormatRelative()] => Could not map specified SharePoint time zone with corresponding IANA time zone.");
    }
    var zonedTime = utcToZonedTime(utcDate, timeZone);
    var locale = !!cultureName ? getLocaleFromCultureName(cultureName) : undefined;
    return formatRelative(zonedTime, new Date(), {
      weekStartsOn: 6,
      locale: locale
    });
  };
  return {
    guessBrowserTimeZone: guessBrowserTimeZone,
    utcToZonedTime: utcToZonedTime$1,
    zonedTimeToUtc: zonedTimeToUtc$1,
    formatUtcToZonedTime: formatUtcToZonedTime,
    getDateDistanceToNow: getDateDistanceToNow,
    getFormatRelative: getFormatRelative
  };
};

var EBreakPoints;
(function (EBreakPoints) {
  EBreakPoints[EBreakPoints["XXXLarge"] = 1900] = "XXXLarge";
  EBreakPoints[EBreakPoints["ExtraExtraLarge"] = 1400] = "ExtraExtraLarge";
  EBreakPoints[EBreakPoints["ExtraLarge"] = 1200] = "ExtraLarge";
  EBreakPoints[EBreakPoints["Large"] = 992] = "Large";
  EBreakPoints[EBreakPoints["Medium"] = 768] = "Medium";
  EBreakPoints[EBreakPoints["Small"] = 576] = "Small";
  EBreakPoints[EBreakPoints["ExtraSmall"] = 320] = "ExtraSmall";
})(EBreakPoints || (EBreakPoints = {}));

var EMessageType;
(function (EMessageType) {
  EMessageType["INFO"] = "info";
  EMessageType["ERROR"] = "error";
  EMessageType["SUCCESS"] = "success";
})(EMessageType || (EMessageType = {}));

var useComponentUtils = function useComponentUtils() {
  var getCacheKey = useCallback(function (key, uniqueId) {
    return "" + key + uniqueId;
  }, []);
  var validateUrl = useCallback(function (url) {
    if (!url) {
      return false;
    }
    try {
      var urlValid = new URL(url);
      return !!urlValid;
    } catch (e) {
      return false;
    }
  }, []);
  var trimBeginDoubleSlash = function trimBeginDoubleSlash(value) {
    if (value.charAt(0) === "/" && value.charAt(1) === "/") {
      return value.substring(1, value.length);
    }
    return value;
  };
  var isValidGUID = useCallback(function (str) {
    var regex = new RegExp(/^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$/);
    if (!str) {
      return false;
    }
    if (regex.test(str) === true) {
      return true;
    } else {
      return false;
    }
  }, []);
  var getPageNameFromUrl = useCallback(function (url) {
    if (!url) {
      return "";
    }
    var urlParts = url.split("/");
    return urlParts[urlParts.length - 1];
  }, []);
  var getSPSiteAbsoluteUrl = useCallback(function (absolutefileUrl) {
    var hostname = window.location.hostname;
    var rootSiteUrl = "https://" + hostname;
    if (absolutefileUrl.indexOf(rootSiteUrl + "/sites/") > -1 || absolutefileUrl.indexOf(rootSiteUrl + "/teams/") > -1) {
      var fileServerRelativeUrl = absolutefileUrl.split(hostname)[1];
      // Split server relative URL by '/' to obtain web name
      var webName = fileServerRelativeUrl.split("/")[2];
      var webAbsoluteUrl = "https://" + hostname + "/sites/" + webName;
      if (absolutefileUrl.indexOf(rootSiteUrl + "/teams/") > -1) {
        webAbsoluteUrl = "https://" + hostname + "/teams/" + webName;
      }
      return webAbsoluteUrl;
    }
    return rootSiteUrl;
  }, []);
  var getFileServerRelativeUrlFromAbsoluteUrl = useCallback(function (absoluteFileUrl) {
    var fileServerRelativeUrl = absoluteFileUrl.split(window.location.hostname)[1];
    fileServerRelativeUrl = trimBeginDoubleSlash(fileServerRelativeUrl);
    return fileServerRelativeUrl;
  }, []);
  var encodeRestUrl = useCallback(function (query) {
    return encodeURIComponent(query.replace(/[%]/g, "%25")).replace(/[']/g, "%27%27").replace(/[&]/g, "%26").replace(/[#]/g, "%23").replace(/[?]/g, "%3F").replace(/[/]/g, "%2F").replace(/[+]/g, "%2B");
  }, []);
  var checkValueBreakPoint = useCallback(function (value) {
    if (value === null || value === undefined) {
      return false;
    }
    return Object.prototype.hasOwnProperty.call(value, "extraSmall") || Object.prototype.hasOwnProperty.call(value, "small") || Object.prototype.hasOwnProperty.call(value, "medium") || Object.prototype.hasOwnProperty.call(value, "large") || Object.prototype.hasOwnProperty.call(value, "extraLarge");
  }, []);
  var getProperty = useCallback(function (obj, key) {
    return obj[key.toString().toLowerCase()];
  }, []);
  var getCurrentDevice = useCallback(function (containerWidth) {
    if (containerWidth >= EBreakPoints.XXXLarge) return 'XXXLarge';
    if (containerWidth >= EBreakPoints.ExtraExtraLarge) return 'ExtraExtraLarge';
    if (containerWidth >= EBreakPoints.ExtraLarge) return 'ExtraLarge';
    if (containerWidth >= Number(EBreakPoints.Large)) return 'Large';
    if (containerWidth >= Number(EBreakPoints.Medium)) return 'Medium';
    if (containerWidth >= Number(EBreakPoints.Small)) return 'Small';
    return 'ExtraSmall';
  }, []);
  var getSpacingBreakPoint = useCallback(function (value, containerWidth) {
    var device = getCurrentDevice(containerWidth);
    var breakPoints = {
      ExtraSmall: "xs",
      Small: "s",
      Medium: "m",
      Large: "l",
      ExtraLarge: "xl",
      ExtraExtraLarge: "xxl"
    };
    var newValue = value;
    if (checkValueBreakPoint(value)) {
      newValue = getProperty(value, device != null ? device : "Medium") || breakPoints[device];
    }
    return newValue;
  }, [getCurrentDevice, checkValueBreakPoint, getProperty]);
  // "none" | "xxs" | "xs" | "sNudge" | "s" | "mNudge" | "m" | "l" | "xl" | "xxl" | "xxxl"
  var getSpacing = useCallback(function (value, containerWidth, type) {
    if (!value) return "none";
    // Check if value is in pixel format like '20px' or percentage format like '20%'
    if (typeof value === "string" && (/^\d+px$/.test(value) || /^\d+%$/.test(value))) {
      return value; // Return the same value for all sides
    }
    var newType = type;
    var spacingTokens = {
      padding: "spacingHorizontal",
      vertical: "spacingVertical",
      horizontal: "spacingHorizontal"
    };
    var newValue = getSpacingBreakPoint(value, containerWidth);
    switch (newValue) {
      case "none":
        return tokens[spacingTokens[newType] + "None"];
      case "xxs":
        return tokens[spacingTokens[newType] + "XXS"];
      case "xs":
        return tokens[spacingTokens[newType] + "XS"];
      case "sNudge":
        return tokens[spacingTokens[newType] + "SNudge"];
      case "s":
        return tokens[spacingTokens[newType] + "S"];
      case "mNudge":
        return tokens[spacingTokens[newType] + "MNudge"];
      case "m":
        return tokens[spacingTokens[newType] + "M"];
      case "l":
        return tokens[spacingTokens[newType] + "L"];
      case "xl":
        return tokens[spacingTokens[newType] + "XL"];
      case "xxl":
        return tokens[spacingTokens[newType] + "XXL"];
      case "xxxl":
        return tokens[spacingTokens[newType] + "XXXL"];
      default:
        return tokens[spacingTokens[newType] + "M"];
    }
  }, [getSpacingBreakPoint]);
  var getBaseStyles = useCallback(function (baseProps, containerWidth, _containerHeight) {
    var verticalSpacing = baseProps.verticalSpacing,
      horizontalSpacing = baseProps.horizontalSpacing,
      paddingLeft = baseProps.paddingLeft,
      paddingRight = baseProps.paddingRight,
      paddingBottom = baseProps.paddingBottom,
      background = baseProps.background,
      width = baseProps.width,
      maxWidth = baseProps.maxWidth,
      height = baseProps.height,
      maxHeight = baseProps.maxHeight,
      marginLeft = baseProps.marginLeft,
      marginRight = baseProps.marginRight,
      marginTop = baseProps.marginTop,
      marginBottom = baseProps.marginBottom,
      paddingTop = baseProps.paddingTop,
      padding = baseProps.padding,
      margin = baseProps.margin,
      styles = baseProps.styles;
    var wpaddingTop = getSpacing(paddingTop, containerWidth, "padding");
    var wpaddingLeft = getSpacing(paddingLeft, containerWidth, "padding");
    var wpaddingRight = getSpacing(paddingRight, containerWidth, "padding");
    var wpaddingBottom = getSpacing(paddingBottom, containerWidth, "padding");
    var wpadding = getSpacing(padding, containerWidth, "padding");
    var wmarginLeft = getSpacing(marginLeft, containerWidth, "padding");
    var wmarginRight = getSpacing(marginRight, containerWidth, "padding");
    var wmarginTop = getSpacing(marginTop, containerWidth, "padding");
    var wmarginBottom = getSpacing(marginBottom, containerWidth, "padding");
    var wmargin = getSpacing(margin, containerWidth, "padding");
    if (wpadding) {
      wpaddingTop = wpaddingTop === 'none' ? wpadding : wpaddingTop;
      wpaddingLeft = wpaddingLeft === 'none' ? wpadding : wpaddingLeft;
      wpaddingRight = wpaddingRight === 'none' ? wpadding : wpaddingRight;
      wpaddingBottom = wpaddingBottom === 'none' ? wpadding : wpaddingBottom;
    }
    if (wmargin) {
      wmarginLeft = wmarginLeft === 'none' ? wmargin : wmarginLeft;
      wmarginRight = wmarginRight === 'none' ? wmargin : wmarginRight;
      wmarginTop = wmarginTop === 'none' ? wmargin : wmarginTop;
      wmarginBottom = wmarginBottom === 'none' ? wmargin : wmarginBottom;
    }
    var wgapRow = getSpacing(verticalSpacing, containerWidth, "vertical");
    var wgapCol = getSpacing(horizontalSpacing, containerWidth, "horizontal");
    var wgap = wgapRow + " " + wgapCol;
    return _extends({}, styles, {
      gap: wgap,
      paddingTop: wpaddingTop,
      paddingLeft: wpaddingLeft,
      paddingRight: wpaddingRight,
      paddingBottom: wpaddingBottom,
      marginLeft: wmarginLeft,
      marginRight: wmarginRight,
      marginTop: wmarginTop,
      marginBottom: wmarginBottom,
      background: background,
      width: width != null ? width : undefined,
      height: height != null ? height : undefined,
      maxWidth: maxWidth != null ? maxWidth : undefined,
      maxHeight: maxHeight != null ? maxHeight : undefined,
      overflow: "auto"
    });
  }, [getSpacing]);
  var getLayoutBreakPoint = useCallback(function (value, containerWidth) {
    var device = getCurrentDevice(containerWidth);
    var newValue = value;
    if (checkValueBreakPoint(value)) {
      newValue = getProperty(value, device != null ? device : "Medium") || "";
    }
    return newValue;
  }, [getCurrentDevice, checkValueBreakPoint, getProperty]);
  return {
    getCacheKey: getCacheKey,
    validateUrl: validateUrl,
    trimBeginDoubleSlash: trimBeginDoubleSlash,
    isValidGUID: isValidGUID,
    getPageNameFromUrl: getPageNameFromUrl,
    getSPSiteAbsoluteUrl: getSPSiteAbsoluteUrl,
    getFileServerRelativeUrlFromAbsoluteUrl: getFileServerRelativeUrlFromAbsoluteUrl,
    encodeRestUrl: encodeRestUrl,
    getSpacing: getSpacing,
    getCurrentDevice: getCurrentDevice,
    getBaseStyles: getBaseStyles,
    getLayoutBreakPoint: getLayoutBreakPoint
  };
}; // ... }

var DEBUG = process.env.NODE_ENV !== 'production';
var DATA_IMAGE = "data:image/";
var useImageUtils = function useImageUtils() {
  var base64FromSVGUrl = useCallback(/*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
      var svg, svg64, b64Start, image64;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch(url).then(function (response) {
              return response.text();
            });
          case 2:
            svg = _context.sent;
            svg64 = btoa(svg);
            b64Start = "data:image/svg+xml;base64,";
            image64 = b64Start + svg64;
            return _context.abrupt("return", image64);
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }(), []);
  var getImageBase64 = useCallback(/*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(pictureUrl, customWidth, customHeight) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              var image = new Image();
              image.crossOrigin = "anonymous";
              image.addEventListener("load", function () {
                var _tempCanvas$getContex;
                var tempCanvas = document.createElement("canvas");
                tempCanvas.width = customWidth != null ? customWidth : image.width;
                tempCanvas.height = customHeight != null ? customHeight : image.height;
                tempCanvas == null || (_tempCanvas$getContex = tempCanvas.getContext("2d")) == null || _tempCanvas$getContex.drawImage(image, 0, 0, customWidth != null ? customWidth : image.width, customHeight != null ? customHeight : image.height);
                var base64Str;
                try {
                  base64Str = tempCanvas.toDataURL("image/png", 1);
                  resolve(base64Str);
                } catch (err) {
                  if (DEBUG) {
                    console.error("[ImageService.getBase64Image]: Err='" + err.message + "'");
                  }
                  reject(err);
                }
              });
              image.addEventListener("error", function (err) {
                if (DEBUG) {
                  console.error("[ImageService.getBase64Image]: Image load error='" + err.message + "'");
                }
                reject(err);
              });
              image.src = pictureUrl;
            }));
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x2, _x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }(), []);
  var isBase64Image = useCallback(function (data) {
    return !isEmpty(data) && data.indexOf(DATA_IMAGE) >= 0;
  }, []);
  var getBase64ImageFromDOMImg = useCallback(function (imgElementId) {
    try {
      var imgElement = document.getElementById(imgElementId);
      var canvas = document.createElement("canvas");
      canvas.width = imgElement.width;
      canvas.height = imgElement.height;
      var ctx = canvas.getContext("2d");
      ctx == null || ctx.drawImage(imgElement, 0, 0);
      var dataURL = canvas.toDataURL("image/png");
      return dataURL;
    } catch (err) {
      if (DEBUG) {
        console.error("[getBase64ImageFromDOMImg]: Err='" + err.message + "'");
      }
      return undefined;
    }
  }, []);
  return {
    getBase64ImageFromDOMImg: getBase64ImageFromDOMImg,
    isBase64Image: isBase64Image,
    getImageBase64: getImageBase64,
    base64FromSVGUrl: base64FromSVGUrl
  };
};

var useCardStyles = function useCardStyles(props) {
  var styles = props.styles;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var cardStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return _extends({}, baseStyles, styles);
  }, [getBaseStyles, props, styles]);
  var bodyCardDefaultStyles = useMemo(function () {
    return {
      display: "flex",
      flexDirection: "column",
      justifyContent: "start",
      alignItems: "stretch",
      overflow: "unset"
    };
  }, []);
  return {
    cardStyles: cardStyles,
    bodyCardDefaultStyles: bodyCardDefaultStyles
  };
};

var Card = function Card(props) {
  var className = props.className,
    cardBody = props.cardBody,
    cardBodyClassName = props.cardBodyClassName,
    cardHeader = props.cardHeader,
    cardHeaderClassName = props.cardHeaderClassName,
    cardHeaderImage = props.cardHeaderImage,
    cardHeaderAction = props.cardHeaderAction,
    cardHeaderDescription = props.cardHeaderDescription,
    cardFooterAction = props.cardFooterAction,
    cardFooterClassName = props.cardFooterClassName,
    cardFooterContent = props.cardFooterContent,
    cardPreviewImage = props.cardPreviewImage,
    cardPreviewLogo = props.cardPreviewLogo,
    _props$cardPreviewPos = props.cardPreviewPosition,
    cardPreviewPosition = _props$cardPreviewPos === void 0 ? "top" : _props$cardPreviewPos;
  var _useCardStyles = useCardStyles(props),
    cardStyles = _useCardStyles.cardStyles,
    bodyCardDefaultStyles = _useCardStyles.bodyCardDefaultStyles;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
            _width = _entry$contentRect.width,
            _height = _entry$contentRect.height;
          setWidth(_width);
          setHeight(_height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  return createElement(Fragment, null, createElement("div", {
    ref: ref
  }, createElement(Card$1, Object.assign({
    className: className,
    style: cardStyles(width, height)
  }, props), cardPreviewImage && cardPreviewPosition === "top" && createElement(CardPreview, {
    logo: cardPreviewLogo
  }, cardPreviewImage, " "), cardHeader && createElement(CardHeader, {
    className: cardHeaderClassName,
    image: cardHeaderImage,
    header: cardHeader,
    description: cardHeaderDescription,
    action: cardHeaderAction
  }), cardPreviewImage && cardPreviewPosition === "afterHeader" && createElement(CardPreview, {
    logo: cardPreviewLogo
  }, cardPreviewImage, " "), cardBody && createElement("div", {
    className: mergeClasses(cardBodyClassName),
    style: bodyCardDefaultStyles
  }, cardBody), cardPreviewImage && cardPreviewPosition === "bottom" && createElement(CardPreview, {
    logo: cardPreviewLogo
  }, cardPreviewImage, " "), cardFooterContent && createElement(CardFooter, {
    action: cardFooterAction,
    className: cardFooterClassName
  }, cardFooterContent))));
};

var usePrevNextButtons = function usePrevNextButtons(emblaApi) {
  var _useState = useState(true),
    prevBtnDisabled = _useState[0],
    setPrevBtnDisabled = _useState[1];
  var _useState2 = useState(true),
    nextBtnDisabled = _useState2[0],
    setNextBtnDisabled = _useState2[1];
  var onPrevButtonClick = useCallback(function () {
    if (!emblaApi) return;
    emblaApi.scrollPrev();
  }, [emblaApi]);
  var onNextButtonClick = useCallback(function () {
    if (!emblaApi) return;
    emblaApi.scrollNext();
  }, [emblaApi]);
  var onSelect = useCallback(function (emblaApi) {
    setPrevBtnDisabled(!emblaApi.canScrollPrev());
    setNextBtnDisabled(!emblaApi.canScrollNext());
  }, []);
  useEffect(function () {
    if (!emblaApi) return;
    onSelect(emblaApi);
    emblaApi.on('reInit', onSelect);
    emblaApi.on('select', onSelect);
  }, [emblaApi, onSelect]);
  return {
    prevBtnDisabled: prevBtnDisabled,
    nextBtnDisabled: nextBtnDisabled,
    onPrevButtonClick: onPrevButtonClick,
    onNextButtonClick: onNextButtonClick
  };
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useCarouselStyles = function useCarouselStyles(_props, containerWidth) {
  var _useComponentUtils = useComponentUtils(),
    getCurrentDevice = _useComponentUtils.getCurrentDevice;
  var slideSizeBasedOnWidth = useCallback(function () {
    var deviceSize = getCurrentDevice(containerWidth);
    var slideSize = "95%";
    switch (deviceSize) {
      case "Medium":
        slideSize = "45%";
        break;
      case "Large":
        slideSize = "calc(95% / 4)";
        break;
      case "ExtraLarge":
        slideSize = "calc(95% / 5)";
        break;
      default:
        slideSize = "95%";
        break;
    }
    return slideSize;
  }, [containerWidth, getCurrentDevice]);
  var getSlideSpacing = useCallback(function () {
    var deviceSize = getCurrentDevice(containerWidth);
    var slideSpacing = tokens.spacingVerticalM;
    switch (deviceSize) {
      case "Medium":
        slideSpacing = tokens.spacingVerticalM;
        break;
      case "Large":
        slideSpacing = tokens.spacingVerticalL;
        break;
      case "ExtraLarge":
        slideSpacing = tokens.spacingVerticalXL;
        break;
      default:
        slideSpacing = tokens.spacingVerticalM;
        break;
    }
    return slideSpacing;
  }, [containerWidth, getCurrentDevice]);
  var enableControls = css({
    display: "flex",
    justifyContent: "space-between",
    alignItems: "stretch",
    gap: 10,
    padding: 5
  });
  var embla__viewport = css({
    overflow: "hidden",
    paddingTop: "10px",
    paddingBottom: "20px"
  });
  var embla__container = css({
    backfaceVisibility: "hidden",
    display: "flex",
    touchAction: "pan-y"
  });
  var embla = css({
    ".embla": {}
  });
  var embla__slide = css({
    minWidth: 0,
    flex: "0 0 " + slideSizeBasedOnWidth(),
    paddingLeft: "" + getSlideSpacing()
  });
  var embla__buttons = css({
    display: "grid",
    gridTemplateColumns: "repeat(2, 1fr)",
    gap: 0,
    alignItems: "center"
  });
  return {
    enableControls: enableControls,
    embla__viewport: embla__viewport,
    embla__container: embla__container,
    embla: embla,
    embla__slide: embla__slide,
    embla__buttons: embla__buttons
  };
};

var useCarouselStylesMain = function useCarouselStylesMain(props) {
  var styles = props.styles;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var carouselStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return _extends({}, baseStyles, styles);
  }, [getBaseStyles, props, styles]);
  return {
    carouselStyles: carouselStyles
  };
};

var useStyle = /*#__PURE__*/makeStyles({
  titleStyles: {
    display: "-webkit-box",
    overflow: "hidden",
    textOverflow: "ellipsis",
    "-webkit-line-clamp": "1",
    "-webkit-box-orient": "vertical",
    textAlign: "start",
    height: "25px"
  }
});
var Carousel = function Carousel(props) {
  var className = props.className,
    items = props.items,
    title = props.title;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  var _useCarouselStylesMai = useCarouselStylesMain(props),
    carouselStyles = _useCarouselStylesMai.carouselStyles;
  var _useEmblaCarousel = useEmblaCarousel(),
    emblaRef = _useEmblaCarousel[0],
    emblaApi = _useEmblaCarousel[1];
  var styles = useStyle();
  var _useCarouselStyles = useCarouselStyles(props, width),
    enableControls = _useCarouselStyles.enableControls,
    embla__slide = _useCarouselStyles.embla__slide,
    embla__container = _useCarouselStyles.embla__container,
    embla__viewport = _useCarouselStyles.embla__viewport,
    embla__buttons = _useCarouselStyles.embla__buttons;
  var _usePrevNextButtons = usePrevNextButtons(emblaApi),
    prevBtnDisabled = _usePrevNextButtons.prevBtnDisabled,
    nextBtnDisabled = _usePrevNextButtons.nextBtnDisabled,
    onPrevButtonClick = _usePrevNextButtons.onPrevButtonClick,
    onNextButtonClick = _usePrevNextButtons.onNextButtonClick;
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
            _width = _entry$contentRect.width,
            _height = _entry$contentRect.height;
          setWidth(_width);
          setHeight(_height);
        }
      });
      setWidth(ref.current.clientWidth);
      setHeight(ref.current.clientHeight);
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  return createElement(Fragment, null, createElement("div", {
    id: "-carousel",
    className: mergeClasses(className, "embla"),
    style: _extends({}, carouselStyles(width, height)),
    ref: ref
  }, createElement("div", {
    className: enableControls
  }, createElement(Subtitle2, {
    className: styles.titleStyles
  }, title), createElement("div", {
    className: embla__buttons
  }, createElement(Button, {
    onClick: onPrevButtonClick,
    disabled: prevBtnDisabled,
    appearance: "subtle",
    icon: createElement(ChevronLeftRegular, null)
  }), createElement(Button, {
    onClick: onNextButtonClick,
    disabled: nextBtnDisabled,
    appearance: "subtle",
    icon: createElement(ChevronRightRegular, null)
  }))), createElement("div", {
    className: embla__viewport,
    ref: emblaRef
  }, createElement("div", {
    className: embla__container
  }, items.map(function (item, index) {
    return createElement("div", {
      className: embla__slide,
      key: index
    }, item);
  })))));
};

var useCenterStyles = function useCenterStyles(props) {
  var styles = props.styles;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var centerStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return _extends({}, baseStyles, styles, {
      overflow: "hidden",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
      height: "100%"
    });
  }, [getBaseStyles, props, styles]);
  var childrenStyles = css({
    justifyContent: "center",
    textAlign: "center"
  });
  return {
    centerStyles: centerStyles,
    childrenStyles: childrenStyles
  };
};

var Center = function Center(props) {
  var className = props.className,
    children = props.children;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  var _useCenterStyles = useCenterStyles(props),
    centerStyles = _useCenterStyles.centerStyles;
  // Debounce utility function
  var debounce = function debounce(func, delay) {
    var timeout;
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        return func.apply(void 0, args);
      }, delay);
    };
  };
  useEffect(function () {
    var handleResize = function handleResize(entries) {
      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
        var entry = _step.value;
        var _entry$contentRect = entry.contentRect,
          _width = _entry$contentRect.width,
          _height = _entry$contentRect.height;
        setWidth(_width);
        setHeight(_height);
      }
    };
    var debouncedResize = debounce(handleResize, 200);
    var resizeObserver = new ResizeObserver(function (entries) {
      debouncedResize(entries);
    });
    if (ref.current) {
      resizeObserver.observe(ref.current);
    }
    return function () {
      resizeObserver.disconnect();
    };
  }, []);
  return createElement("div", {
    id: "center",
    className: className,
    style: _extends({}, centerStyles(width, height), {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      width: '100%'
    }),
    ref: ref
  }, children);
};

var useGridStyles = function useGridStyles(props) {
  var cols = props.cols,
    verticalSpacing = props.verticalSpacing,
    horizontalSpacing = props.horizontalSpacing,
    styles = props.styles,
    gridItemAutoFlow = props.gridItemAutoFlow,
    minItemWidth = props.minItemWidth;
  var _useComponentUtils = useComponentUtils(),
    getSpacing = _useComponentUtils.getSpacing,
    getCurrentDevice = _useComponentUtils.getCurrentDevice,
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var gridStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    var wgapRow = getSpacing(verticalSpacing, containerWidth, "vertical");
    var wgapCol = getSpacing(horizontalSpacing, containerWidth, "horizontal");
    var wgap = wgapRow + " " + wgapCol;
    var device = getCurrentDevice(containerWidth);
    var gridTemplateColumns = "repeat(auto-" + (gridItemAutoFlow != null ? gridItemAutoFlow : "fill") + ", minmax(" + (minItemWidth != null ? minItemWidth : 250) + "px, 1fr))";
    if (cols && cols > 0) {
      var numberCols = cols != null ? cols : 0;
      switch (device) {
        case "ExtraSmall":
          numberCols = Math.min(cols, 1);
          break;
        case "Small":
          numberCols = Math.min(cols, 2);
          break;
        case "Medium":
          numberCols = Math.min(cols, 3);
          break;
        case "Large":
          numberCols = Math.min(cols, 4);
          break;
        case "ExtraLarge":
          numberCols = Math.min(cols, 4);
          break;
        case "ExtraExtraLarge":
          numberCols = Math.min(cols, 5);
          break;
        case "XXXLarge":
          numberCols = Math.min(cols, 6);
          break;
        default:
          numberCols = 0;
      }
      gridTemplateColumns = "repeat(" + numberCols + ",  minmax(auto, 1fr))";
    }
    return _extends({}, baseStyles, {
      display: "grid",
      gridTemplateColumns: gridTemplateColumns,
      gap: wgap,
      overflow: "hidden"
    }, styles);
  }, [getBaseStyles, props, getSpacing, verticalSpacing, horizontalSpacing, getCurrentDevice, cols, styles, gridItemAutoFlow, minItemWidth]);
  return {
    gridStyles: gridStyles
  };
};

var Grid = function Grid(props) {
  var children = props.children,
    className = props.className;
  var _useGridStyles = useGridStyles(props),
    gridStyles = _useGridStyles.gridStyles;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container 
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
            _width = _entry$contentRect.width,
            _height = _entry$contentRect.height;
          setWidth(_width);
          setHeight(_height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  return createElement(Fragment, null, createElement("div", {
    className: className,
    style: gridStyles(width, height),
    ref: ref
  }, children));
};

var useLayoutStyles = function useLayoutStyles(props) {
  var maxWith = props.maxWith;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var rootStyles = useCallback(function (LayoutWidth, LayoutHeight) {
    return _extends({}, getBaseStyles(props, LayoutWidth, LayoutHeight), {
      maxWidth: maxWith
    });
  }, [getBaseStyles, maxWith, props]);
  var layoutGridStyles = css({
    display: "grid",
    overflow: "hidden"
  });
  return {
    rootStyles: rootStyles,
    layoutGridStyles: layoutGridStyles
  };
};

// Default layout configuration
var defaultLayoutConfig = {
  areas: ["header header header", "sidebar content sidebar", "footer footer footer"],
  columns: "1fr 3fr 1fr",
  rows: "auto 1fr auto"
};
var Layout = function Layout(props) {
  var className = props.className,
    children = props.children,
    _props$layoutConfig = props.layoutConfig,
    layoutConfig = _props$layoutConfig === void 0 ? defaultLayoutConfig : _props$layoutConfig;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  var _useLayoutStyles = useLayoutStyles(_extends({}, props, {
      layoutConfig: layoutConfig
    })),
    rootStyles = _useLayoutStyles.rootStyles,
    layoutGridStyles = _useLayoutStyles.layoutGridStyles;
  var useDebounce = function useDebounce(fn, delay) {
    var timer;
    return useCallback(function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      clearTimeout(timer);
      timer = setTimeout(function () {
        return fn.apply(void 0, args);
      }, delay);
    }, [fn, delay]);
  };
  var handleResize = useDebounce(function (width, height) {
    setWidth(width);
    setHeight(height);
  }, 200);
  useEffect(function () {
    if (!ref.current) return;
    var observer = new ResizeObserver(function (entries) {
      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
        var entry = _step.value;
        var _entry$contentRect = entry.contentRect,
          _width = _entry$contentRect.width,
          _height = _entry$contentRect.height;
        handleResize(_width, _height);
      }
    });
    observer.observe(ref.current);
    return function () {
      return observer.disconnect();
    };
  }, [handleResize]);
  return createElement("div", {
    id: "-Layout",
    className: mergeClasses(className, layoutGridStyles),
    style: _extends({}, rootStyles(width, height), {
      gridTemplateAreas: layoutConfig.areas.join(" "),
      gridTemplateColumns: layoutConfig.columns,
      gridTemplateRows: layoutConfig.rows
    }),
    ref: ref
  }, Children.map(children, function (child, index) {
    if (isValidElement(child)) {
      var _childElement$props$a, _childElement$props;
      var childElement = child;
      return createElement("div", {
        key: index,
        style: {
          gridArea: (_childElement$props$a = (_childElement$props = childElement.props) == null ? void 0 : _childElement$props.area) != null ? _childElement$props$a : "area-" + index
        }
      }, child);
    }
    return child;
  }));
};

var LayoutItem = function LayoutItem(props) {
  var area = props.area,
    children = props.children;
  return createElement(Fragment, null, createElement("div", {
    style: {
      gridArea: area
    }
  }, children));
};

var useRenderLabelStyles = /*#__PURE__*/makeStyles({
  labelContainer: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center"
  }, /*#__PURE__*/shorthands.gap("6px")),
  iconStyles: {
    width: "26px"
  },
  item: {
    paddingLeft: "15px"
  }
});

var RenderLabel = function RenderLabel(props) {
  var label = props.label,
    icon = props.icon,
    isRequired = props.isRequired;
  var styles = useRenderLabelStyles();
  return createElement(Fragment, null, createElement("div", {
    className: styles.labelContainer
  }, icon && isValidElement(icon) ? icon : createElement(Icon, {
    icon: icon,
    className: styles.iconStyles,
    width: "20px",
    height: "20px",
    color: tokens.colorBrandForeground1
  }), createElement(Caption1, {
    style: {
      color: tokens.colorBrandForeground1
    }
  }, label), createElement(Caption1, {
    style: {
      color: tokens.colorPaletteRedForeground1
    }
  }, isRequired ? " *" : "")));
};

var useStyles = /*#__PURE__*/makeStyles({
  root: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    height: "100%",
    width: "100%"
  },
  spinner: {
    width: "100px",
    height: "100px"
  }
});
var RenderSpinner = function RenderSpinner(props) {
  var size = props.size,
    label = props.label,
    labelPosition = props.labelPosition,
    style = props.style,
    className = props.className;
  var styles = useStyles();
  return createElement("div", {
    className: styles.root
  }, createElement(Spinner, {
    style: style,
    className: mergeClasses(styles.spinner, className),
    size: size,
    label: label,
    labelPosition: labelPosition
  }));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useSpaceStyles = function useSpaceStyles(props) {
  var verticalSpacing = props.verticalSpacing,
    horizontalSpacing = props.horizontalSpacing;
  var _useComponentUtils = useComponentUtils(),
    getSpacing = _useComponentUtils.getSpacing;
  var spaceStyles = useCallback(function (containerWidth) {
    if (!containerWidth) return {};
    if (horizontalSpacing) {
      var width = getSpacing(horizontalSpacing, containerWidth, "horizontal");
      return {
        width: width
      };
    }
    if (verticalSpacing) {
      var height = getSpacing(verticalSpacing, containerWidth, "vertical");
      return {
        height: height
      };
    }
    return {};
  }, [getSpacing, horizontalSpacing, verticalSpacing]);
  return {
    spaceStyles: spaceStyles
  };
};

var Space = function Space(props) {
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _useSpaceStyles = useSpaceStyles(props),
    spaceStyles = _useSpaceStyles.spaceStyles;
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container 
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _width = entry.contentRect.width;
          setWidth(_width);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  return createElement(Fragment, null, createElement("div", {
    id: "-space",
    style: spaceStyles(width),
    ref: ref
  }));
};

var useStackStyles = function useStackStyles(props) {
  var horizontal = props.horizontal,
    horizontalAlign = props.horizontalAlign,
    verticalAlign = props.verticalAlign,
    verticalFill = props.verticalFill,
    wrap = props.wrap,
    columnGap = props.columnGap,
    RowGap = props.RowGap;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var stackStyles = useCallback(function (containerWidth, containerHeight) {
    var alignValue = verticalAlign || "start";
    var justifyValue = horizontal ? horizontalAlign : "start";
    var wflexFlow = horizontal ? {
      flexFlow: wrap ? "row wrap" : "row nowrap",
      height: "100%"
    } : {
      height: "100%",
      maxHeight: "100%"
    };
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return _extends({
      columnGap: columnGap,
      rowGap: RowGap,
      display: "flex",
      flexDirection: horizontal ? "row" : "column",
      alignItems: alignValue,
      justifyContent: justifyValue
    }, wflexFlow, {
      height: verticalFill ? "100%" : baseStyles.height
    }, baseStyles, props.styles);
  }, [getBaseStyles, horizontal, horizontalAlign, props, verticalAlign, verticalFill, wrap]);
  return {
    stackStyles: stackStyles
  };
};

var Stack = function Stack(props) {
  var children = props.children,
    className = props.className;
  var _useStackStyles = useStackStyles(props),
    stackStyles = _useStackStyles.stackStyles;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
            _width = _entry$contentRect.width,
            _height = _entry$contentRect.height;
          setWidth(_width);
          setHeight(_height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  return createElement(Fragment, null, createElement("div", {
    className: className,
    style: stackStyles(width, height),
    ref: ref
  }, children));
};

var StackItem = function StackItem(props) {
  var children = props.children,
    grow = props.grow,
    disableShrink = props.disableShrink,
    shrink = props.shrink,
    order = props.order,
    alignSelf = props.alignSelf,
    verticalFill = props.verticalFill;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var ref = useRef(null);
  var _React$useState = useState(0),
    width = _React$useState[0],
    setWidth = _React$useState[1];
  var _React$useState2 = useState(0),
    height = _React$useState2[0],
    setHeight = _React$useState2[1];
  var baseStyles = getBaseStyles(props, width, height);
  useEffect(function () {
    var resizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
      resizeObserver = new ResizeObserver(function (entries) {
        for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
          var entry = _step.value;
          var _entry$contentRect = entry.contentRect,
            _width = _entry$contentRect.width,
            _height = _entry$contentRect.height;
          setWidth(_width);
          setHeight(_height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);
  var styles = _extends({}, baseStyles, {
    alignSelf: alignSelf,
    order: order,
    height: verticalFill ? "100%" : "auto",
    flexGrow: grow ? typeof grow === "boolean" ? 1 : grow : undefined,
    flexShrink: disableShrink || !grow && !shrink ? 0 : 1,
    minWidth: 0,
    minHeight: 0,
    width: "auto"
  });
  return createElement(Fragment, null, createElement("div", {
    ref: ref,
    style: styles
  }, children));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
// Styles
var useStyles$1 = function useStyles() {
  return {
    container: css({
      display: "flex",
      flexWrap: "nowrap",
      minWidth: 0,
      overflow: "hidden",
      gap: 10,
      marginBottom: 20,
      width: "100%"
    }),
    text1LineStyle: css({
      display: "-webkit-box",
      WebkitLineClamp: 1,
      WebkitBoxOrient: "vertical",
      overflow: "hidden",
      textAlign: "start",
      textOverflow: "ellipsis",
      wordBreak: "break-word"
    }),
    button: css({
      cursor: "pointer",
      minWidth: 107
    })
  };
};
// CustomControlBar Component
var CustomControlBar = function CustomControlBar(_ref) {
  var items = _ref.items,
    selectedItemId = _ref.selectedItemId,
    onSelectedItem = _ref.onSelectedItem,
    renderControl = _ref.renderControl,
    theme = _ref.theme;
  var styles = useStyles$1();
  var onItemSelect = useCallback(function (itemId) {
    if (onSelectedItem) {
      onSelectedItem(itemId);
    }
  }, [onSelectedItem]);
  return createElement(Overflow, null, createElement(FluentProvider, {
    theme: theme
  }, " ", createElement("div", {
    className: mergeClasses(styles.container)
  }, items.map(function (item) {
    var isSelected = item.id === selectedItemId;
    return createElement(OverflowItem, {
      key: item.id,
      id: item.id,
      priority: isSelected ? 2 : 1
    }, renderControl(item, isSelected, function () {
      return onItemSelect(item.id);
    }));
  }), createElement(OverflowMenu, {
    items: items,
    onSelectedItem: onItemSelect,
    theme: theme
  }), " ")));
};
// Overflow Menu and Overflow Menu Item Components
var OverflowMenuItem = function OverflowMenuItem(_ref2) {
  var item = _ref2.item,
    onSelectedItem = _ref2.onSelectedItem;
  var isVisible = useIsOverflowItemVisible(item.id);
  if (isVisible) {
    return null;
  }
  return createElement(MenuItem, {
    key: item.id,
    icon: item.icon,
    onClick: function onClick() {
      return onSelectedItem(item.id);
    }
  }, createElement("div", null, item.name));
};
var OverflowMenu = function OverflowMenu(_ref3) {
  var items = _ref3.items,
    onSelectedItem = _ref3.onSelectedItem,
    theme = _ref3.theme;
  var _useOverflowMenu = useOverflowMenu(),
    ref = _useOverflowMenu.ref,
    overflowCount = _useOverflowMenu.overflowCount,
    isOverflowing = _useOverflowMenu.isOverflowing;
  var MoreHorizontal = useMemo(function () {
    return bundleIcon(MoreHorizontalFilled, MoreHorizontalRegular);
  }, []);
  if (!isOverflowing) {
    return null;
  }
  return createElement(IdPrefixProvider, {
    value: "menu-over-"
  }, createElement(FluentProvider, {
    theme: theme
  }, createElement(Menu, null, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    appearance: "transparent",
    ref: ref,
    icon: createElement(MoreHorizontal, null),
    "aria-label": overflowCount + " more options",
    role: "button"
  })), createElement(MenuPopover, null, createElement(MenuList, null, items.map(function (item) {
    return createElement(OverflowMenuItem, {
      key: item.id,
      item: item,
      onSelectedItem: onSelectedItem
    });
  }))))));
};

// SkeletonLoading.tsx
var SkeletonLoading = function SkeletonLoading() {
  return createElement(Skeleton, null, createElement(Grid, {
    cols: 1,
    padding: "m",
    verticalSpacing: "m",
    horizontalSpacing: "m"
  }, createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  }), createElement(SkeletonItem, {
    size: 40
  })));
};

var useDataGridStyles = function useDataGridStyles(props) {
  var styles = props.styles;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var dataGridStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return {
      datagridStyles: css(_extends({}, baseStyles, styles)),
      rowSelection: css({
        ":hover": {
          cursor: "pointer"
        }
      })
    };
  }, [getBaseStyles, props, styles]);
  return {
    dataGridStyles: dataGridStyles
  };
};

// Generic DataGrid component
var DataGrid = function DataGrid(props) {
  var items = props.items,
    columns = props.columns,
    _props$defaultSelecte = props.defaultSelectedItems,
    defaultSelectedItems = _props$defaultSelecte === void 0 ? [] : _props$defaultSelecte,
    _props$enableSorting = props.enableSorting,
    enableSorting = _props$enableSorting === void 0 ? false : _props$enableSorting,
    _props$selectionMode = props.selectionMode,
    selectionMode = _props$selectionMode === void 0 ? "none" : _props$selectionMode,
    onSelectionChange = props.onSelectionChange,
    onSortChange = props.onSortChange,
    defaultSortState = props.defaultSortState,
    columnSizingOptions = props.columnSizingOptions,
    _props$enableResizing = props.enableResizing,
    enableResizing = _props$enableResizing === void 0 ? false : _props$enableResizing,
    noItemsMessage = props.noItemsMessage,
    isLoadingData = props.isLoadingData,
    isLoadingDataMessage = props.isLoadingDataMessage;
  var getItemIndex = function getItemIndex(item) {
    return items.findIndex(function (i) {
      return i === item;
    });
  };
  var _useDataGridStyles = useDataGridStyles(props),
    dataGridStyles = _useDataGridStyles.dataGridStyles;
  var _React$useState = useState(new Set(defaultSelectedItems.map(function (item) {
      return getItemIndex(item);
    }))),
    selectedItems = _React$useState[0],
    setSelectedItems = _React$useState[1];
  var ref = useRef(null);
  var _React$useState2 = useState(0),
    width = _React$useState2[0],
    setWidth = _React$useState2[1];
  var _React$useState3 = useState(0),
    height = _React$useState3[0],
    setHeight = _React$useState3[1];
  useEffect(function () {
    var resizeObserver;
    // Debounced function to handle size updates
    var handleResize = debounce$1(function (entries) {
      for (var _iterator = _createForOfIteratorHelperLoose(entries), _step; !(_step = _iterator()).done;) {
        var entry = _step.value;
        var _entry$contentRect = entry.contentRect,
          _width = _entry$contentRect.width,
          _height = _entry$contentRect.height;
        setWidth(_width);
        setHeight(_height);
      }
    }, 200); // 200ms debounce time, adjust as needed
    if (ref.current) {
      resizeObserver = new ResizeObserver(handleResize);
      resizeObserver.observe(ref.current);
    }
    return function () {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
      handleResize.cancel(); // Cancel any pending debounce calls
    };
  }, []);
  useEffect(function () {
    if (defaultSelectedItems.length > 0) {
      setSelectedItems(new Set(defaultSelectedItems.map(function (item) {
        return getItemIndex(item);
      })));
    }
  }, [defaultSelectedItems, items]);
  // Dynamically create TableColumnDefinition array from ColumnConfig array
  var tableColumns = columns.map(function (colConfig) {
    return createTableColumn({
      columnId: colConfig.column,
      renderHeaderCell: function renderHeaderCell() {
        return createElement(Body1Strong, null, colConfig.header);
      },
      renderCell: function renderCell(item) {
        var _item$colConfig$colum;
        return createElement(TableCellLayout, {
          media: colConfig.media ? colConfig.media(item) : undefined
        }, colConfig.onRender ? colConfig.onRender(item) : String((_item$colConfig$colum = item[colConfig == null ? void 0 : colConfig.column]) != null ? _item$colConfig$colum : ""));
      },
      compare: colConfig.order
    });
  });
  // Handle selection change
  var handleSelectionChange = function handleSelectionChange(_e, data) {
    var newSelectedItems = new Set();
    data.selectedItems.forEach(function (id) {
      var index = Number(id);
      if (!isNaN(index)) {
        newSelectedItems.add(index);
      }
    });
    setSelectedItems(newSelectedItems);
    if (onSelectionChange) {
      var selectedObjects = Array.from(newSelectedItems).map(function (index) {
        return items[index];
      });
      onSelectionChange(selectedObjects);
    }
  };
  // Handle sort change
  var handleSortChange = function handleSortChange(_e, sortState) {
    if (onSortChange) {
      onSortChange(sortState);
    }
  };
  var onRowClick = useCallback(function (e, item) {
    e.stopPropagation();
    if (selectionMode === "row") {
      if (onSelectionChange) {
        onSelectionChange([item]);
      }
    }
  }, [selectionMode, onSelectionChange]);
  var styles = useMemo(function () {
    return dataGridStyles(width, height);
  }, [width, height]);
  var rowSelectionStyles = useMemo(function () {
    if (selectionMode === "row") {
      return styles.rowSelection;
    }
    return "";
  }, [selectionMode, styles.rowSelection]);
  var RenderDataGridBody = useCallback(function () {
    return createElement(DataGridBody, null, function (_ref) {
      var item = _ref.item,
        rowId = _ref.rowId;
      return createElement(DataGridRow, {
        key: rowId,
        className: rowSelectionStyles,
        onClick: function onClick(e) {
          return onRowClick(e, item);
        }
      }, function (_ref2) {
        var renderCell = _ref2.renderCell;
        return createElement(DataGridCell, null, renderCell(item));
      });
    });
  }, [onRowClick, rowSelectionStyles]);
  var hasData = useMemo(function () {
    return items.length && !isLoadingData;
  }, [items, isLoadingData]);
  var RenderGridContent = useCallback(function () {
    if (isLoadingData) {
      return createElement(Fragment, null, isLoadingDataMessage != null ? isLoadingDataMessage : createElement(SkeletonLoading, null));
    }
    if (hasData) {
      return createElement(RenderDataGridBody, null);
    } else if (!isLoadingData && !items.length) {
      return createElement(Fragment, null, noItemsMessage);
    }
    return createElement(Fragment, null);
  }, [hasData, isLoadingData, items, noItemsMessage]);
  return createElement("div", {
    ref: ref,
    className: styles.datagridStyles
  }, createElement(DataGrid$1, {
    as: "div",
    items: items,
    onSelectionChange: handleSelectionChange,
    sortable: enableSorting,
    columns: tableColumns,
    selectionMode: selectionMode === "none" || selectionMode === "row" ? undefined : selectionMode,
    selectedItems: selectedItems,
    defaultSortState: defaultSortState,
    onSortChange: handleSortChange,
    columnSizingOptions: columnSizingOptions,
    resizableColumns: enableResizing,
    resizableColumnsOptions: {
      autoFitColumns: false
    }
  }, createElement(DataGridHeader, null, createElement(DataGridRow, null, function (_ref3) {
    var renderHeaderCell = _ref3.renderHeaderCell;
    return createElement(DataGridHeaderCell, null, renderHeaderCell());
  })), createElement(RenderGridContent, null)));
};

var DropdownField = function DropdownField(_ref) {
  var options = _ref.options,
    onChange = _ref.onChange,
    renderItem = _ref.renderItem,
    validate = _ref.validate,
    label = _ref.label,
    placeholder = _ref.placeholder,
    message = _ref.message,
    messageType = _ref.messageType,
    required = _ref.required,
    size = _ref.size,
    hint = _ref.hint;
  var _useState = useState(""),
    selectedValue = _useState[0],
    setSelectedValue = _useState[1];
  var _useState2 = useState(""),
    error = _useState2[0],
    setError = _useState2[1];
  var handleSelectionChange = function handleSelectionChange(_event, option) {
    var value = (option == null ? void 0 : option.value) || ""; // Getting the selected value
    setSelectedValue(value);
    // Validate the selected value
    var validationError = validate ? validate(value) : "";
    setError(validationError);
    // Call the onChange callback with the selected value if valid
    if (!validationError && onChange) {
      onChange(value);
    }
  };
  // Memoize the validation state
  var validationState = useMemo(function () {
    return error ? "error" : messageType === "warning" ? "warning" : messageType === "info" ? "success" : "none";
  }, [error, messageType]); // Dependencies for memoization
  // Use the custom message if provided, otherwise use the validation error
  var validationMessage = useMemo(function () {
    return error || message;
  }, [error, message]); // Dependencies for memoization
  var getValidationIcon = useCallback(function () {
    switch (validationState) {
      case "error":
        return createElement(ErrorCircle12Filled, null);
      case "warning":
        return createElement(Warning12Filled, null);
      case "success":
        return createElement(CheckmarkCircle12Filled, null);
      default:
        return null;
    }
  }, [validationState]);
  return createElement(Field, {
    label: label,
    required: required,
    validationMessage: validationMessage,
    validationMessageIcon: getValidationIcon(),
    size: size,
    hint: hint,
    validationState: validationState
  }, createElement(Dropdown, {
    placeholder: placeholder,
    onChange: handleSelectionChange,
    value: selectedValue
  }, options.map(function (option) {
    return createElement(Option, {
      key: option.value,
      value: option.value,
      disabled: option.disabled,
      checkIcon: option.checkIcon,
      as: option.as,
      text: option.text || ""
    }, renderItem && renderItem(option), " ");
  })));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var OverflowMenuItem$1 = function OverflowMenuItem(_ref) {
  var id = _ref.id,
    children = _ref.children;
  var isVisible = useIsOverflowItemVisible(id);
  if (isVisible) {
    return null;
  }
  return createElement(MenuItem, null, children);
};
var GenericOverFlowMenu = function GenericOverFlowMenu(_ref2) {
  var items = _ref2.items,
    renderItem = _ref2.renderItem,
    keyExtractor = _ref2.keyExtractor;
  var _useOverflowMenu = useOverflowMenu(),
    ref = _useOverflowMenu.ref,
    overflowCount = _useOverflowMenu.overflowCount,
    isOverflowing = _useOverflowMenu.isOverflowing;
  if (!isOverflowing) {
    return null;
  }
  return createElement(Menu, null, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    ref: ref
  }, "+", overflowCount, " items")), createElement(MenuPopover, null, createElement(MenuList, null, items.map(function (item) {
    return createElement(OverflowMenuItem$1, {
      key: keyExtractor(item),
      id: keyExtractor(item)
    }, renderItem(item));
  }))));
};

var DEFAULT_MIN_WIDTH = 200;
var DEFAULT_MIN_HEIGHT = 200;
var useStyles$2 = /*#__PURE__*/makeStyles({
  dialog: {
    width: "100%",
    height: "100%",
    overflow: "hidden",
    maxHeight: "600px",
    padding: 0
  },
  dialogBody: {
    height: "calc(100% - 200px)"
  }
});
var RenderDialog = function RenderDialog(props) {
  var isOpen = props.isOpen,
    dialogTitle = props.dialogTitle,
    dialogActions = props.dialogActions,
    children = props.children,
    maxWidth = props.maxWidth,
    className = props.className,
    minHeight = props.minHeight,
    minWidth = props.minWidth,
    maxHeight = props.maxHeight;
  var styles = useStyles$2();
  if (!isOpen) return createElement(Fragment, null);
  return createElement(Dialog, {
    open: isOpen,
    modalType: "modal"
  }, createElement(DialogSurface, {
    className: mergeClasses(styles.dialog, className),
    style: {
      maxWidth: maxWidth,
      minWidth: minWidth != null ? minWidth : DEFAULT_MIN_WIDTH,
      minHeight: minHeight != null ? minHeight : DEFAULT_MIN_HEIGHT,
      height: "fit-content",
      maxHeight: maxHeight != null ? maxHeight : ""
    }
  }, createElement(DialogTitle, null, dialogTitle), createElement(DialogBody, {
    className: styles.dialogBody
  }, createElement(DialogContent, null, children)), createElement(DialogActions, {
    fluid: true,
    position: "end"
  }, dialogActions)));
};

var useRenderHeaderStyles = /*#__PURE__*/makeStyles({
  closeButton: {
    marginLeft: "auto",
    position: "absolute",
    top: "10px",
    right: "10px",
    zIndex: 99999
  },
  divider: {
    width: "100%",
    height: "1px",
    backgroundColor: tokens.colorNeutralStroke1,
    marginTop: "6px"
  },
  renderHeaderContent: {
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-start",
    alignItems: "stretch",
    width: "100%"
  },
  renderHeaderHeader: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-start"
  }, /*#__PURE__*/shorthands.padding("10px"), {
    gap: "20px"
  }),
  renderHeaderFooter: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-start"
  }, /*#__PURE__*/shorthands.padding("20px"), {
    gap: "20px"
  }),
  renderHeaderBody: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "column",
    justifyContent: "flex-start"
  }, /*#__PURE__*/shorthands.padding("20px"), {
    gap: "20px"
  }),
  renderHeaderTitleContainer: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center"
  },
  renderHeaderTitle: {
    display: "-webkit-box",
    "-webkit-line-clamp": "1",
    "-webkit-box-orient": "vertical",
    textAlign: "start",
    textOverflow: "ellipsis",
    paddingTop: "10px",
    wordBreak: "break-word"
  },
  renderHeaderDescription: {
    display: "-webkit-box",
    "-webkit-line-clamp": "4",
    "-webkit-box-orient": "vertical",
    textAlign: "start",
    textOverflow: "ellipsis",
    wordBreak: "break-word"
  },
  dialogTitleAndDescriptionContainer: {
    display: "flex",
    flexDirection: "column",
    justifyContent: "start",
    alignItems: "start",
    paddingLeft: "10px",
    paddingRight: "20px"
  }
});

var RenderHeader = function RenderHeader(props) {
  var onDismiss = props.onDismiss,
    title = props.title,
    description = props.description,
    icon = props.icon;
  var styles = useRenderHeaderStyles();
  return createElement(Fragment, null, createElement("div", {
    className: styles.renderHeaderContent
  }, createElement("div", {
    className: styles.renderHeaderHeader
  }, createElement(Button, {
    appearance: "subtle",
    className: styles.closeButton,
    onClick: function onClick(ev) {
      ev.stopPropagation();
      ev.preventDefault();
      onDismiss(false);
    },
    icon: createElement(Dismiss24Regular, null)
  }), createElement("div", {
    className: styles.renderHeaderTitleContainer
  }, isValidElement(icon) ? icon : createElement(Icon, {
    icon: icon
  }), createElement("div", {
    className: styles.dialogTitleAndDescriptionContainer
  }, isValidElement(title) ? title : createElement(Subtitle1, {
    className: styles.renderHeaderTitle
  }, title), isValidElement(description) ? description : createElement(Caption1, {
    className: styles.renderHeaderDescription
  }, description)))), createElement("div", {
    className: styles.divider
  })));
};

var ShareDialog = function ShareDialog(_ref) {
  var isOpen = _ref.isOpen,
    options = _ref.options,
    onClose = _ref.onClose;
  var _useState = useState(undefined),
    dialogUrl = _useState[0],
    setDialogUrl = _useState[1];
  console.log(dialogUrl);
  var iframeRef = useRef(null);
  var _useState2 = useState(400),
    iFrameHeight = _useState2[0],
    setIFrameHeight = _useState2[1];
  var siteUrl = options.siteUrl,
    listId = options.listId,
    itemId = options.itemId,
    name = options.name;
  var closeDialog = useCallback(function () {
    onClose();
  }, [onClose]);
  var handleIframeMessage = useCallback(function (event) {
    if (event.origin !== window.location.origin) return;
    console.log("Message from iframe:", event.data);
    var _JSON$parse = JSON.parse(event.data),
      name = _JSON$parse.name,
      height = _JSON$parse.height;
    switch (name) {
      case "share_dismiss":
        closeDialog();
        break;
      case "share_resize":
        setIFrameHeight(height);
        break;
    }
  }, [closeDialog]);
  useEffect(function () {
    window.addEventListener("message", handleIframeMessage);
    return function () {
      window.removeEventListener("message", handleIframeMessage);
    };
  }, [handleIframeMessage]);
  useEffect(function () {
    if (isOpen) {
      var clientId = "sharePoint";
      var policyTip = 0;
      var folderColor = "";
      var clickTime = new Date().getTime();
      var fullScreenMode = false;
      var origin = encodeURIComponent(window.location.origin);
      var encodeName = encodeURIComponent(name);
      var url = siteUrl + "/_layouts/15/sharedialog.aspx" + ("?listId=" + listId) + ("&listItemId=" + itemId) + ("&clientId=" + clientId) + ("&policyTip=" + policyTip) + ("&folderColor=" + folderColor) + ("&clickTime=" + clickTime) + "&ma=0" + ("&fullScreenMode=" + fullScreenMode) + ("&itemName= " + encodeName) + "&channelId=" + ("&origin=" + origin);
      console.log(url);
      setDialogUrl(url);
    } else {
      setDialogUrl(undefined);
    }
  }, [isOpen, siteUrl, listId, itemId]);
  return createElement(RenderDialog, {
    isOpen: isOpen,
    onDismiss: closeDialog,
    maxHeight: "fit-content"
  }, createElement("iframe", {
    ref: iframeRef,
    src: dialogUrl || "",
    style: {
      width: "100%",
      height: iFrameHeight,
      border: "none"
    },
    onLoad: function onLoad() {
      return console.log("Iframe loaded");
    }
  }));
};

var useShowMessageStyles = /*#__PURE__*/makeStyles({
  root: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  }, /*#__PURE__*/shorthands.padding("10px"), {
    gap: '10px'
  }),
  iconClass: {
    width: "32px",
    height: "32px"
  },
  errorContainer: /*#__PURE__*/_extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "start",
    alignItems: "center",
    gap: '10px'
  }, /*#__PURE__*/shorthands.padding("10px"), {
    backgroundColor: tokens.colorStatusDangerBackground1
  }),
  errorIcon: {
    height: "100%"
  }
});

var ShowMessage = function ShowMessage(props) {
  var messageType = props.messageType,
    children = props.children,
    message = props.message;
  var styles = useShowMessageStyles();
  var _React$useState = useState(null),
    renderMessageIcon = _React$useState[0],
    setRenderMessageIcon = _React$useState[1];
  var RenderError = useCallback(function () {
    return createElement(Fragment, null, createElement("div", {
      className: styles.errorContainer
    }, createElement("div", {
      className: styles.errorIcon
    }, createElement(Icon, {
      icon: "fluent:error-circle-12-regular",
      width: "32",
      height: "32",
      color: tokens.colorStatusDangerForeground1
    })), createElement(Body1, null, message)));
  }, [message, styles.errorContainer, styles.errorIcon]);
  useEffect(function () {
    switch (messageType) {
      case EMessageType.SUCCESS:
        setRenderMessageIcon(createElement(CheckmarkCircle32Regular, {
          primaryFill: tokens.colorStatusSuccessForeground1
        }));
        break;
      case EMessageType.INFO:
        setRenderMessageIcon(createElement(Info32Regular, {
          primaryFill: tokens.colorStatusWarningForeground1
        }));
        break;
    }
  }, [messageType]);
  if (messageType === EMessageType.ERROR) {
    return createElement(RenderError, null);
  }
  return createElement(Fragment, null, createElement("div", {
    className: styles.root
  }, renderMessageIcon, createElement(Body1Strong, null, message), children));
};

var useBreadcrumStyles = function useBreadcrumStyles() {
  var styles = {
    container: css({
      display: 'flex',
      alignItems: 'center',
      alignContent: 'center',
      overflow: 'hidden',
      whiteSpace: 'nowrap',
      padding: '8px',
      backgroundColor: 'transparent'
    }),
    breadcrumbItem: css({
      minWidth: 'fit-content',
      padding: 0,
      margin: '0px'
    }),
    separator: css({
      marginRight: '8px'
    })
  };
  var getStyles = function getStyles(props, size) {
    var icon = props.icon;
    switch (size) {
      case 'small':
        return css({
          fontSize: '12px',
          padding: '4px',
          paddingLeft: icon ? '0px' : '4px'
        });
      case 'medium':
        return css({
          fontSize: '14px',
          padding: '6px',
          paddingLeft: icon ? '0px' : '6px'
        });
      case 'large':
        return css({
          fontSize: '16px',
          padding: '8px',
          paddingLeft: icon ? '0px' : '8px'
        });
      case 'current':
        return css({
          fontWeight: tokens.fontWeightBold,
          cursor: 'default',
          display: '-webkit-box',
          '-webkit-line-clamp': '1',
          '-webkit-box-orient': 'vertical',
          overflow: 'hidden',
          textAlign: 'start',
          textOverflow: 'ellipsis',
          wordBreak: 'break-word',
          fontFamily: tokens.fontFamilyBase
        });
      default:
        return css({
          fontSize: '14px',
          padding: '6px',
          paddingLeft: icon ? '0px' : '6px'
        });
    }
  };
  return {
    styles: styles,
    getStyles: getStyles
  };
};

var OverflowMenu$1 = function OverflowMenu(_ref) {
  var items = _ref.items,
    theme = _ref.theme,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? "medium" : _ref$size;
  var _useState = useState(false),
    showDropdown = _useState[0],
    setShowDropdown = _useState[1];
  var buttonRef = useRef(null);
  var dropdownRef = useRef(null);
  var _useState2 = useState({
      top: 0,
      left: 0,
      position: "absolute"
    }),
    dropdownStyles = _useState2[0],
    setDropdownStyles = _useState2[1];
  var _useBreadcrumStyles = useBreadcrumStyles(),
    getStyles = _useBreadcrumStyles.getStyles;
  var handleButtonClick = function handleButtonClick() {
    if (buttonRef.current) {
      var _dropdownRef$current, _dropdownRef$current2;
      var buttonRect = buttonRef.current.getBoundingClientRect();
      var viewportWidth = window.innerWidth;
      var viewportHeight = window.innerHeight;
      var dropdownWidth = ((_dropdownRef$current = dropdownRef.current) == null ? void 0 : _dropdownRef$current.offsetWidth) || 200; // Fallback to 200px width
      var dropdownHeight = ((_dropdownRef$current2 = dropdownRef.current) == null ? void 0 : _dropdownRef$current2.offsetHeight) || 100; // Fallback to 100px height
      var top = buttonRect.bottom + window.scrollY;
      var left = buttonRect.left + window.scrollX;
      // Adjust for right edge
      if (left + dropdownWidth > viewportWidth) {
        left = viewportWidth - dropdownWidth - 10; // Add some padding from the edge
      }
      // Adjust for bottom edge
      if (top + dropdownHeight > viewportHeight) {
        top = buttonRect.top + window.scrollY - dropdownHeight; // Show above the button
      }
      setDropdownStyles({
        top: top,
        left: left,
        position: "absolute"
      });
      setShowDropdown(function (prev) {
        return !prev;
      });
    }
  };
  useEffect(function () {
    var handleOutsideClick = function handleOutsideClick(event) {
      var _buttonRef$current, _dropdownRef$current3;
      if (!((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target)) && !((_dropdownRef$current3 = dropdownRef.current) != null && _dropdownRef$current3.contains(event.target)) && showDropdown) {
        setShowDropdown(false);
      }
    };
    document.addEventListener("mousedown", handleOutsideClick);
    return function () {
      document.removeEventListener("mousedown", handleOutsideClick);
    };
  }, [showDropdown]);
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(Button, {
    ref: buttonRef,
    icon: React__default.createElement(MoreHorizontalRegular, null),
    appearance: "transparent",
    onClick: handleButtonClick
  }), showDropdown && createPortal(React__default.createElement(FluentProvider, {
    theme: theme
  }, React__default.createElement(Card$1, {
    ref: dropdownRef,
    style: _extends({}, dropdownStyles, {
      zIndex: 1000,
      padding: "8px",
      minWidth: "150px"
    })
  }, items.map(function (item, index) {
    return React__default.createElement(Button, {
      icon: item.icon ? item.icon : null,
      key: "overflow-" + index,
      appearance: "transparent",
      onClick: function onClick() {
        item.onClick == null || item.onClick();
        setShowDropdown(false);
      }
    }, React__default.createElement(Text, {
      className: getStyles(item, size)
    }, item.label));
  }))), document.body // Append to the body using React Portal
  ));
};

// Utility: Debounce function to limit ResizeObserver calls
var debounce = function debounce(func, delay) {
  var timeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return func.apply(void 0, args);
    }, delay);
  };
};
var Breadcrumb = function Breadcrumb(_ref) {
  var items = _ref.items,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? '100%' : _ref$maxWidth,
    customStyles = _ref.styles,
    theme = _ref.theme,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$currentIndex = _ref.currentIndex,
    currentIndex = _ref$currentIndex === void 0 ? items.length - 1 : _ref$currentIndex,
    className = _ref.className;
  var _useBreadcrumStyles = useBreadcrumStyles(),
    styles = _useBreadcrumStyles.styles,
    getStyles = _useBreadcrumStyles.getStyles;
  var containerRef = useRef(null);
  var _useState = useState([]),
    visibleItems = _useState[0],
    setVisibleItems = _useState[1];
  var _useState2 = useState([]),
    overflowItems = _useState2[0],
    setOverflowItems = _useState2[1];
  useEffect(function () {
    var updateVisibleItems = function updateVisibleItems() {
      if (!containerRef.current) return;
      var containerWidth = containerRef.current.offsetWidth;
      var currentWidth = 0;
      var visible = [];
      var overflow = [];
      items.forEach(function (item) {
        var estimatedWidth = 80; // Estimate width for each item (adjust if necessary)
        if (currentWidth + estimatedWidth <= containerWidth - 50) {
          visible.push(item);
          currentWidth += estimatedWidth;
        } else {
          overflow.push(item);
        }
      });
      setVisibleItems(visible);
      setOverflowItems(overflow);
    };
    var handleResize = debounce(updateVisibleItems, 100);
    // Set up ResizeObserver
    var resizeObserver = new ResizeObserver(function () {
      handleResize();
    });
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }
    // Initial update
    updateVisibleItems();
    // Cleanup observer on unmount
    return function () {
      resizeObserver.disconnect();
    };
  }, [items]);
  return React__default.createElement("div", {
    ref: containerRef,
    className: mergeClasses(styles.container, className),
    style: _extends({
      maxWidth: maxWidth
    }, customStyles)
  }, React__default.createElement(Stack, {
    horizontal: true,
    verticalAlign: "center",
    horizontalAlign: "start"
  }, visibleItems.map(function (item, index) {
    return React__default.createElement(React__default.Fragment, null, index === currentIndex ? React__default.createElement(Stack, {
      horizontal: true,
      verticalAlign: "center",
      horizontalAlign: "start",
      columnGap: 5,
      styles: {
        overflow: 'hidden'
      }
    }, item.icon ? React__default.cloneElement(item.icon, {
      style: {
        fontSize: size === 'large' ? '20px' : size === 'medium' ? '16px' : '12px'
      }
    }) : null, React__default.createElement(Text, {
      key: item.label,
      className: mergeClasses(styles.breadcrumbItem, getStyles(item, size), getStyles(item, 'current')),
      "aria-current": "page"
    }, item.label)) : React__default.createElement(Button, {
      icon: item.icon ? item.icon : null,
      key: item.label,
      appearance: "transparent",
      className: "" + styles.breadcrumbItem,
      onClick: item.onClick
    }, React__default.createElement(Text, {
      className: getStyles(item, size)
    }, item.label)), index < visibleItems.length - 1 && React__default.createElement(ChevronRightRegular, {
      style: {
        fontSize: size === 'large' ? '20px' : size === 'medium' ? '16px' : '12px'
      }
    }));
  }), overflowItems.length > 0 && React__default.createElement(OverflowMenu$1, {
    items: overflowItems,
    theme: theme
  })));
};

var _excluded = ["ratio", "children", "maxWidth", "maxHeight", "style"];
var AspectRatio = function AspectRatio(_ref) {
  var ratio = _ref.ratio,
    children = _ref.children,
    maxWidth = _ref.maxWidth,
    maxHeight = _ref.maxHeight,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {} : _ref$style,
    props = _objectWithoutPropertiesLoose(_ref, _excluded);
  var aspectStyle = _extends({
    position: 'relative',
    width: '100%',
    paddingTop: 100 / ratio + "%",
    maxWidth: maxWidth || 'none',
    maxHeight: maxHeight || 'none'
  }, style);
  var innerStyle = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  };
  return React__default.createElement("div", Object.assign({
    style: aspectStyle
  }, props), React__default.createElement("div", {
    style: innerStyle
  }, children));
};

var useAspectRatioStyles = function useAspectRatioStyles(props) {
  var styles = props.styles;
  var _useComponentUtils = useComponentUtils(),
    getBaseStyles = _useComponentUtils.getBaseStyles;
  var aspectRatioStyles = useCallback(function (containerWidth, containerHeight) {
    var baseStyles = getBaseStyles(props, containerWidth, containerHeight);
    return _extends({}, baseStyles, styles);
  }, [getBaseStyles, props, styles]);
  return {
    aspectRatioStyles: aspectRatioStyles
  };
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useStyles$3 = function useStyles(_props) {
  var styles = {
    banner: css({
      display: "flex",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      padding: "5px 10px 0px 10px"
    }),
    fieldContainer: css({
      paddingLeft: 32
    })
  };
  return {
    styles: styles
  };
};
var RenderProperty = function RenderProperty(_ref) {
  var fieldLabel = _ref.fieldLabel,
    fieldValue = _ref.fieldValue,
    icon = _ref.icon;
  var _useStyles = useStyles$3(),
    styles = _useStyles.styles;
  return createElement(Stack, null, createElement(RenderLabel, {
    label: fieldLabel,
    icon: icon
  }), createElement("div", {
    className: styles.fieldContainer
  }, createElement(Body1, null, fieldValue, " ")));
};
var EventDetailsPopover = function EventDetailsPopover(props) {
  var event = props.event;
  var title = event.title,
    start = event.start,
    end = event.end,
    location = event.location,
    category = event.category;
  var _useStyles2 = useStyles$3(),
    styles = _useStyles2.styles;
  var formatedStartDate = format$1(parseISO(start), "PPp");
  var formatedEndDate = format$1(parseISO(end), "PPp");
  return createElement(Fragment, null, createElement(Card, {
    appearance: "subtle",
    padding: "m",
    paddingTop: "s",
    width: "250px",
    cardBody: createElement(Stack, {
      RowGap: 10
    }, createElement("div", {
      className: styles.banner
    }, createElement(Subtitle1, null, title)), createElement(Divider, null), createElement(Stack, {
      horizontal: true,
      horizontalAlign: "end",
      width: "100%"
    }, createElement(Badge, {
      appearance: "filled"
    }, category)), createElement(RenderProperty, {
      fieldLabel: "Start",
      fieldValue: formatedStartDate,
      icon: "mingcute:time-line"
    }), createElement(RenderProperty, {
      fieldLabel: "End",
      fieldValue: formatedEndDate,
      icon: "mingcute:time-line"
    }), createElement(RenderProperty, {
      fieldLabel: "Location",
      fieldValue: location,
      icon: "mingcute:location-line"
    })),
    cardFooterContent: createElement(Stack, {
      horizontal: true,
      horizontalAlign: "end",
      width: "100%"
    }, createElement(Button, {
      appearance: "subtle",
      onClick: function onClick() {
        console.log('click button');
      }
    }, "Details"))
  }));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useCalendarStyles = function useCalendarStyles(_props) {
  var styles = {
    calendarWrapper: css({
      padding: "20px",
      paddingTop: "10px",
      overflow: "auto",
      flex: 1,
      display: "grid",
      gridTemplateColumns: "repeat(7, 1fr)",
      gridTemplateRows: "auto",
      gridAutoRows: "minmax(100px, 1fr)",
      gap: "1px",
      width: "calc(100% - 40px)"
    }),
    header: css({
      display: "flex",
      justifyContent: "start",
      gap: "10px",
      alignItems: "center",
      padding: "16px"
    }),
    dayHeader: css({
      textAlign: "start",
      padding: "8px",
      borderBottom: "1px solid " + tokens.colorNeutralStroke1
    }),
    day: css({
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      border: "1px solid " + tokens.colorNeutralStroke1,
      backgroundColor: tokens.colorNeutralBackground1,
      position: "relative"
    }),
    otherMonthDay: css({
      color: tokens.colorNeutralStroke2,
      backgroundColor: tokens.colorNeutralBackground2
    }),
    cardDay: css({
      height: "100%",
      minHeight: 100,
      borderRadius: 0,
      overflow: "hidden !important"
    }),
    cardDayOnHover: css({
      ":hover": {
        backgroundColor: tokens.colorNeutralBackground2
      }
    }),
    currentDay: css({
      borderTop: "5px solid " + tokens.colorBrandBackground
    }),
    currentDayLabel: css({
      color: tokens.colorBrandBackground,
      fontWeight: 600
    }),
    eventCard: css({
      /*  backgroundColor: tokens.colorNeutralBackground1, */
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      zIndex: 1
    }),
    eventContainer: css({
      display: "flex",
      flexDirection: "column",
      overflowY: "auto",
      paddingTop: "5px",
      paddingBottom: "5px",
      paddingLeft: "5px",
      paddingRight: "5px",
      // Scrollbar styles
      "::-webkit-scrollbar": {
        width: "5px",
        height: "5px"
      },
      "::-webkit-scrollbar-track": {
        background: tokens.colorNeutralBackground4,
        borderRadius: "10px"
      },
      "::-webkit-scrollbar-thumb": {
        background: tokens.colorBrandStroke2Hover,
        borderRadius: "10px"
      },
      "::-webkit-scrollbar-thumb:hover": {
        background: tokens.colorNeutralStroke2
      }
    }),
    eventCardWeekView: css({
      backgroundColor: tokens.colorBrandBackground,
      color: tokens.colorNeutralForegroundOnBrand,
      borderRadius: "4px",
      padding: "4px",
      margin: "2px",
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      height: "100%"
    }),
    popoverContent: css({
      padding: 0,
      borderTopWidth: 20,
      borderTopStyle: "solid"
    })
  };
  var applyEventHouverColorClass = function applyEventHouverColorClass(backgroundColor, houverColor) {
    return css({
      backgroundColor: backgroundColor != null ? backgroundColor : tokens.colorBrandBackground,
      ":hover": {
        backgroundColor: houverColor != null ? houverColor : tokens.colorBrandBackgroundHover
      }
    });
  };
  return {
    styles: styles,
    applyEventHouverColorClass: applyEventHouverColorClass
  };
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useUtils = function useUtils() {
  var getSpanSlots = useCallback(function (start, end) {
    var startDate = new Date(start);
    var endDate = new Date(end);
    // Calculate the start and end slots based on event times
    var startHour = startDate.getHours();
    var startMinute = startDate.getMinutes();
    var startSlot = startHour * 2 + (startMinute >= 1 ? 1 : 0); // Adjust for 30-minute slots
    var endHour = endDate.getHours();
    var endMinute = endDate.getMinutes();
    var endSlot = endHour * 2 + (endMinute >= 1 ? 2 : 0); // Adjust for 30-minute slots
    var spanSlots = endSlot - startSlot;
    return {
      spanSlots: spanSlots,
      startSlot: startSlot,
      endSlot: endSlot
    };
  }, []);
  var generateLightAndHoverColors = useCallback(function (baseColor, lightnessIncrease,
  // Increase in lightness for light variant
  hoverIncrease // Increase in lightness for hover variant
  ) {
    if (lightnessIncrease === void 0) {
      lightnessIncrease = 20;
    }
    if (hoverIncrease === void 0) {
      hoverIncrease = 10;
    }
    // Function to convert hex to HSL
    var hexToHsl = function hexToHsl(hex) {
      var r = parseInt(hex.slice(1, 3), 16) / 255;
      var g = parseInt(hex.slice(3, 5), 16) / 255;
      var b = parseInt(hex.slice(5, 7), 16) / 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var delta = max - min;
      var h = 0;
      var s = 0;
      var l = (max + min) / 2;
      if (delta !== 0) {
        s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);
        switch (max) {
          case r:
            h = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / delta + 2;
            break;
          case b:
            h = (r - g) / delta + 4;
            break;
        }
        h /= 6;
      }
      return {
        h: h * 360,
        s: s * 100,
        l: l * 100
      };
    };
    // Function to convert HSL to hex
    var hslToHex = function hslToHex(h, s, l) {
      var a = s * Math.min(l, 100 - l) / 100;
      var f = function f(n) {
        var k = (n + h / 30) % 12;
        var color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        return Math.round(255 * color).toString(16).padStart(2, "0");
      };
      return "#" + f(0) + f(8) + f(4);
    };
    // Convert base color to HSL
    var _hexToHsl = hexToHsl(baseColor),
      h = _hexToHsl.h,
      s = _hexToHsl.s,
      l = _hexToHsl.l;
    // Generate light and hover colors by adjusting lightness
    var lightColor = hslToHex(h, s, Math.min(l + lightnessIncrease, 100));
    var hoverColor = hslToHex(h, s, Math.min(l + hoverIncrease, 100));
    return {
      lightColor: lightColor,
      hoverColor: hoverColor
    };
  }, []);
  var getEventColors = useCallback(function (category) {
    // Predefined color map
    var colorMap = {
      meeting: {
        backgroundColor: "#D9E9FC",
        hoverColor: "#AAD4F5"
      },
      appointment: {
        backgroundColor: "#FFF4CE",
        hoverColor: "#FFE2A1"
      },
      task: {
        backgroundColor: "#DFF6DD",
        hoverColor: "#C6F0C6"
      },
      deadline: {
        backgroundColor: "#FFE4E1",
        hoverColor: "#FFB6C1"
      },
      holiday: {
        backgroundColor: "#F0FFF0",
        hoverColor: "#C1FFC1"
      },
      celebration: {
        backgroundColor: "#FFF0F5",
        hoverColor: "#FFDAB9"
      },
      reminder: {
        backgroundColor: "#E0FFFF",
        hoverColor: "#AFEEEE"
      },
      workshop: {
        backgroundColor: "#F5F5DC",
        hoverColor: "#EEE8AA"
      },
      webinar: {
        backgroundColor: "#F0F8FF",
        hoverColor: "#B0E0E6"
      },
      conference: {
        backgroundColor: "#FAFAD2",
        hoverColor: "#FFD700"
      }
    };
    // Default color if category is not found
    var defaultColors = {
      backgroundColor: tokens.colorNeutralBackground3,
      hoverColor: tokens.colorNeutralBackground3Hover
    };
    // Return colors for the category, or default if not found
    return colorMap[category.toLowerCase()] || defaultColors;
  }, []);
  var generateColor = useCallback(function (str) {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    var c = (hash & 0x00ffffff).toString(16).toUpperCase();
    return "#" + ("00000".substring(0, 6 - c.length) + c);
  }, []);
  return {
    getSpanSlots: getSpanSlots,
    generateLightAndHoverColors: generateLightAndHoverColors,
    getEventColors: getEventColors,
    generateColor: generateColor
  };
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var RenderEventToDayOfMonth = function RenderEventToDayOfMonth(props) {
  var headerId = useId();
  var events = props.events,
    date = props.date,
    onCardHoverChange = props.onCardHoverChange,
    columnHeight = props.columnHeight;
  var _useCalendarStyles = useCalendarStyles(),
    styles = _useCalendarStyles.styles,
    applyEventHouverColorClass = _useCalendarStyles.applyEventHouverColorClass;
  var positioningRef = useRef(null);
  var _useUtils = useUtils(),
    getEventColors = _useUtils.getEventColors;
  var handleMouseEnter = function handleMouseEnter(eventTitle) {
    if (onCardHoverChange) {
      onCardHoverChange(true, eventTitle);
    }
  };
  var handleMouseLeave = useCallback(function (eventTitle) {
    if (onCardHoverChange) {
      onCardHoverChange(false, eventTitle);
    }
  }, [onCardHoverChange]);
  // Set the target for the popover
  var buttonRef = useCallback(function (el) {
    var _positioningRef$curre;
    (_positioningRef$curre = positioningRef.current) == null || _positioningRef$curre.setTarget(el);
  }, [positioningRef]);
  // Render the card
  var renderCard = useCallback(function (index, calEvent, colors) {
    return createElement("div", {
      ref: buttonRef
    }, createElement(Card, {
      key: index,
      className: mergeClasses(styles.eventCard, applyEventHouverColorClass(colors.backgroundColor, colors.hoverColor)),
      paddingTop: "4px",
      paddingBottom: "4px",
      paddingLeft: "8px",
      paddingRight: "8px",
      marginTop: index === 0 ? "0px" : "5px",
      cardHeader: createElement(Caption1, null, calEvent.title),
      onMouseEnter: function onMouseEnter() {
        return handleMouseEnter(calEvent.title);
      },
      onMouseLeave: function onMouseLeave() {
        return handleMouseLeave(calEvent.title);
      }
    }));
  }, [handleMouseEnter, handleMouseLeave, applyEventHouverColorClass]);
  var renderCardWithPopOver = useCallback(function (calEvent, index, colors) {
    return createElement(Fragment, null, createElement(Popover, {
      withArrow: true,
      key: index,
      mouseLeaveDelay: 30,
      closeOnScroll: true,
      closeOnIframeFocus: true,
      openOnHover: true
    }, createElement(PopoverTrigger, null, renderCard(index, calEvent, colors)), createElement(PopoverSurface, {
      "aria-labelledby": headerId,
      className: mergeClasses(styles.popoverContent, applyEventHouverColorClass(colors.backgroundColor, colors.hoverColor))
    }, createElement(EventDetailsPopover, {
      event: calEvent
    }))));
  }, [renderCard]);
  if (!events || !(events != null && events.length)) return createElement(Fragment, null, " ");
  return createElement(Fragment, null, createElement("div", {
    style: {
      height: columnHeight
    },
    className: styles.eventContainer
  }, events.map(function (calEvent, index) {
    var eventStart = startOfDay(new Date(calEvent.start));
    var eventEnd = endOfDay(new Date(calEvent.end));
    var isEventInDay = isWithinInterval(date, {
      start: eventStart,
      end: eventEnd
    });
    if (!isEventInDay) return null;
    var colors = getEventColors(calEvent.category);
    var customRender = calEvent.onRenderInMonthView;
    // If the event has a custom renderer, use it
    if (isValidElement(customRender)) {
      return cloneElement(customRender, {
        className: mergeClasses(customRender.props.className, styles.eventCard)
      });
    }
    return calEvent.enableOnHouver ? renderCardWithPopOver(calEvent, index, colors) : renderCard(index, calEvent, colors);
  })));
};

var Day = function Day(props) {
  var day = props.day,
    currentMonth = props.currentMonth,
    events = props.events,
    date = props.date,
    columnHeight = props.columnHeight;
  var _useCalendarStyles = useCalendarStyles(),
    styles = _useCalendarStyles.styles;
  var currentDate = new Date();
  var _React$useState = useState(false),
    isEventHovered = _React$useState[0],
    setIsEventHovered = _React$useState[1];
  var isCurrentDayAndMonth = useMemo(function () {
    return isSameDay(date, currentDate);
  }, [date, currentDate]);
  var renderCurrentDayLabel = useMemo(function () {
    return createElement(Stack, {
      horizontal: true,
      horizontalAlign: "start",
      verticalAlign: "center",
      RowGap: 10
    }, createElement(Body2, {
      className: styles.currentDayLabel
    }, day, " ", currentDate.toLocaleString("default", {
      month: "short"
    })));
  }, [day]);
  var handleCardHoverChange = useCallback(function (isHovered) {
    setIsEventHovered(isHovered);
  }, []);
  return createElement(Fragment, null, createElement(Card, {
    className: mergeClasses(styles.cardDay, currentMonth ? "" : styles.otherMonthDay, isCurrentDayAndMonth ? styles.currentDay : "", !isEventHovered ? styles.cardDayOnHover : ""),
    cardHeader: isCurrentDayAndMonth ? renderCurrentDayLabel : createElement(Body2, null, day),
    padding: "xsmall",
    cardBody: createElement(RenderEventToDayOfMonth, {
      events: events,
      date: date,
      onCardHoverChange: handleCardHoverChange,
      columnHeight: columnHeight - 60
    })
  }));
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useWeekViewStyles = function useWeekViewStyles() {
  var styles = {
    container: css({
      display: 'flex',
      flexDirection: 'column',
      width: 'calc(100% - 40px)',
      height: '100vh',
      overflow: 'hidden',
      padding: '20px'
    }),
    header: css({
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: '16px',
      borderBottom: "1px solid " + tokens.colorNeutralStroke1
    }),
    weekGrid: css({
      display: 'grid',
      gridTemplateColumns: '80px repeat(7, 1fr)',
      gridTemplateRows: '50px 40px repeat(48, 33px)',
      height: 'fit-content',
      overflowY: 'auto',
      border: "1px solid " + tokens.colorNeutralStroke1,
      maxHeight: 'calc(100vh - 100px)',
      scrollbarWidth: 'thin',
      scrollbarColor: tokens.colorBrandBackground + " " + tokens.colorNeutralBackground1,
      '&::-webkit-scrollbar': {
        width: '8px'
      },
      '&::-webkit-scrollbar-track': {
        background: tokens.colorNeutralBackground1
      },
      '&::-webkit-scrollbar-thumb': {
        background: tokens.colorBrandBackground,
        borderRadius: '4px'
      },
      '&::-webkit-scrollbar-thumb:hover': {
        background: tokens.colorBrandBackgroundHover
      }
    }),
    blankHeader: css({
      gridColumn: '1',
      backgroundColor: tokens.colorNeutralBackground3,
      borderBottom: "3px solid " + tokens.colorNeutralStroke3
    }),
    timeColumn: css({
      gridColumn: '1',
      gridRow: '3 / span 49',
      display: 'flex',
      flexDirection: 'column',
      backgroundColor: tokens.colorNeutralBackground1,
      borderRight: "1px solid " + tokens.colorNeutralStroke1
    }),
    timeCell: css({
      height: '100%',
      display: 'flex',
      alignItems: 'center',
      fontSize: '12px',
      color: tokens.colorNeutralForeground3,
      borderBottom: "1px solid " + tokens.colorNeutralStroke1,
      justifyContent: 'center'
    }),
    fullDayRow: css({
      gridRow: '2',
      display: 'grid',
      gridTemplateColumns: '80px repeat(7, 1fr)',
      gap: '0',
      padding: '0',
      backgroundColor: tokens.colorNeutralBackground2,
      borderBottom: "3px solid " + tokens.colorNeutralStroke2
    }),
    fullDayLabel: css({
      gridColumn: '1',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      alignContent: 'center',
      color: tokens.colorBrandBackground,
      padding: '5px',
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      borderBottom: "3px solid " + tokens.colorNeutralStroke2
    }),
    fullDayCell: css({
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      display: 'flex',
      flexDirection: 'row',
      gap: '2px',
      padding: '4px',
      borderBottom: "3px solid " + tokens.colorNeutralStroke2,
      overflow: 'hidden'
    }),
    fullDayEvent: css({
      flex: '1 1 auto',
      minWidth: '24px',
      height: '24px',
      padding: '4px 8px',
      backgroundColor: tokens.colorBrandBackground,
      color: tokens.colorNeutralForegroundOnBrand,
      borderRadius: '4px',
      overflow: 'hidden',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }),
    dayHeaderCell: css({
      textAlign: 'center',
      backgroundColor: tokens.colorNeutralBackground2,
      padding: '8px',
      fontWeight: 'bold',
      borderBottom: "1px solid " + tokens.colorNeutralStroke1
    }),
    todayHeaderCell: css({
      borderTop: "5px solid " + tokens.colorBrandBackground
    }),
    eventCard: css({
      padding: 2,
      alignItems: 'center',
      justifyContent: 'center',
      marginRight: '2px',
      zIndex: 1,
      position: 'absolute',
      alignContent: 'center',
      overflow: 'hidden',
      ':hover': {
        pointerEvents: 'auto',
        cursor: 'pointer'
      }
    }),
    event: css({
      height: '100%',
      backgroundColor: tokens.colorBrandBackground,
      color: tokens.colorNeutralForegroundOnBrand,
      borderRadius: '4px',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      marginRight: '2px',
      zIndex: 1,
      position: 'absolute',
      alignContent: 'center',
      ':hover': {
        pointerEvents: 'auto',
        cursor: 'pointer'
      }
    }),
    dayCell: css({
      borderBottom: "1px solid " + tokens.colorNeutralStroke1,
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      position: 'relative',
      overflow: 'visible',
      FlexDirection: 'column',
      gap: "4px"
    }),
    currentTimeIndicator: css({
      position: 'absolute',
      left: 0,
      height: '2px',
      backgroundColor: tokens.colorPaletteRedBorderActive,
      width: '100%',
      zIndex: 1
    }),
    currentHalfHourCell: css({
      border: "2px solid " + tokens.colorPaletteRedBorderActive
    }),
    eventTitle: css({
      display: '-webkit-box',
      '-webkit-line-clamp': '2',
      '-webkit-box-orient': 'vertical',
      textAlign: 'start',
      textOverflow: 'ellipsis',
      paddingLeft: '8px',
      wordBreak: 'break-word',
      overflow: 'hidden'
    }),
    popoverContent: css({
      padding: 0,
      borderTopWidth: 20,
      borderTopStyle: "solid"
    })
  };
  var applyEventHouverColorClass = function applyEventHouverColorClass(backgroundColor, houveColor) {
    return css({
      backgroundColor: backgroundColor != null ? backgroundColor : tokens.colorBrandBackground,
      ':hover': {
        backgroundColor: houveColor != null ? houveColor : tokens.colorBrandBackgroundHover
      }
    });
  };
  return {
    styles: styles,
    applyEventHouverColorClass: applyEventHouverColorClass
  };
};

var EventPopoverCard = function EventPopoverCard(_ref) {
  var event = _ref.event,
    colors = _ref.colors,
    spanSlots = _ref.spanSlots,
    rowHeight = _ref.rowHeight,
    eventIndex = _ref.eventIndex,
    eventCount = _ref.eventCount;
  var headerId = useId();
  var _useWeekViewStyles = useWeekViewStyles(),
    styles = _useWeekViewStyles.styles,
    applyEventHouverColorClass = _useWeekViewStyles.applyEventHouverColorClass;
  var cardRef = useRef(null);
  var cardContent = useMemo(function () {
    return createElement("div", null, createElement(Stack, {
      columnGap: 4,
      verticalAlign: "center"
    }, createElement(Body1Strong, {
      className: styles.eventTitle
    }, event.title), createElement(Stack, {
      columnGap: 4,
      horizontal: true,
      verticalAlign: "center",
      horizontalAlign: "start"
    }, createElement(Body1, null, format$1(new Date(event.start), "HH:mm"), "H"), " - ", createElement(Body1, null, format$1(new Date(event.end), "HH:mm"), "H"))));
  }, [event]);
  return createElement(Card$1, {
    ref: cardRef,
    key: event.id,
    className: mergeClasses(styles.eventCard, applyEventHouverColorClass(colors.backgroundColor, colors.hoverColor)),
    style: {
      flex: "0 0 calc(100% / " + eventCount + ")",
      height: rowHeight * spanSlots + "px",
      left: eventIndex * 10 + "%",
      width: "calc(" + (100 - eventIndex * 10) + "% - 8px)",
      margin: 4
    }
  }, event.enableOnHouver ? createElement(Popover, {
    withArrow: true,
    mouseLeaveDelay: 50,
    closeOnScroll: true,
    closeOnIframeFocus: true,
    openOnHover: true
  }, createElement(PopoverTrigger, null, cardContent), createElement(PopoverSurface, {
    "aria-labelledby": headerId,
    className: mergeClasses(styles.popoverContent, applyEventHouverColorClass(colors.backgroundColor, colors.hoverColor))
  }, createElement(EventDetailsPopover, {
    event: event
  }))) : cardContent);
};

var EventRenderer = function EventRenderer(_ref) {
  var event = _ref.event,
    eventCount = _ref.eventCount,
    spanSlots = _ref.spanSlots,
    rowHeight = _ref.rowHeight,
    eventIndex = _ref.eventIndex,
    view = _ref.view;
  var _useWeekViewStyles = useWeekViewStyles(),
    styles = _useWeekViewStyles.styles;
  var _useUtils = useUtils(),
    getEventColors = _useUtils.getEventColors;
  var colors = getEventColors(event.category);
  // Memoize the function that determines the custom render function
  var customOnRenderEvent = useCallback(function () {
    return view === "day" ? event.onRenderInDayView : event.onRenderInWeekView;
  }, [event, view]);
  if (isValidElement(customOnRenderEvent)) {
    return cloneElement(customOnRenderEvent, {
      event: event,
      className: mergeClasses(customOnRenderEvent.props.className, styles.eventCard),
      style: _extends({}, customOnRenderEvent.props.style, {
        flex: "0 0 calc(100% / " + eventCount + ")",
        height: rowHeight * spanSlots + "px",
        left: eventIndex * 10 + "%",
        width: "calc(" + (100 - eventIndex * 10) + "% - 8px)",
        margin: 4
      })
    });
  }
  // Return  default card
  return createElement(EventPopoverCard, {
    key: event.id,
    event: event,
    colors: colors,
    spanSlots: spanSlots,
    rowHeight: rowHeight,
    eventIndex: eventIndex,
    eventCount: eventCount
  });
};

var useCalendar = function useCalendar(initialEvents, timezone) {
  // Add a unique id to each event on initialization
  var initializeEventsWithId = function initializeEventsWithId(events) {
    return events.map(function (event) {
      return _extends({}, event, {
        id: event.id || v4()
      });
    });
  };
  var _useState = useState(initializeEventsWithId(initialEvents || [])),
    calendarEvents = _useState[0],
    setCalendarEvents = _useState[1];
  // Helper function to handle timezone and daylight savings
  var toLocalDate = function toLocalDate(dateString) {
    return new Date(new Date(dateString).toLocaleString(undefined, {
      timeZone: timezone
    }));
  };
  // Function to generate all events grouped by day for a specific month
  var getMonthCalendar = function getMonthCalendar(year, month) {
    var daysInMonth = new Date(year, month + 1, 0).getDate(); // Days in the given month
    var calendarEventsByDay = {};
    // Initialize the structure with empty arrays for each day
    for (var day = 1; day <= daysInMonth; day++) {
      var date = new Date(year, month, day);
      var dateString = date.toISOString().split("T")[0];
      calendarEventsByDay[dateString] = [];
    }
    // Loop through events and group them by their start and end dates
    calendarEvents.forEach(function (event) {
      var eventStart = toLocalDate(event.start);
      var eventEnd = toLocalDate(event.end);
      var currentDate = new Date(eventStart);
      while (currentDate <= eventEnd) {
        var _dateString = currentDate.toISOString().split("T")[0];
        // If the event falls within the month and day, add it to the list
        if (calendarEventsByDay[_dateString]) {
          calendarEventsByDay[_dateString].push(event);
        }
        // Move to the next day
        currentDate.setDate(currentDate.getDate() + 1);
      }
    });
    return calendarEventsByDay;
  };
  // Function to add a new event
  var addEvent = function addEvent(event) {
    var eventWithId = _extends({}, event, {
      id: event.id || v4()
    });
    setCalendarEvents(function (prevEvents) {
      return [].concat(prevEvents, [eventWithId]);
    });
  };
  // Function to get events for a specific week
  var getWeekEvents = function getWeekEvents(startDate) {
    var weekEvents = [];
    var start = toLocalDate(startDate);
    var _loop = function _loop() {
      var currentDate = new Date(start);
      currentDate.setDate(start.getDate() + i);
      var dateString = currentDate.toISOString().split("T")[0];
      var dayTimeSlots = Array.from({
        length: 48
      }, function (_, index) {
        return {
          time: String(Math.floor(index / 2)).padStart(2, "0") + ":" + (index % 2 === 0 ? "00" : "30"),
          events: []
        };
      });
      var fullDayEvents = [];
      calendarEvents.forEach(function (event) {
        var eventStart = toLocalDate(event.start);
        var eventEnd = toLocalDate(event.end);
        if (event.isFullDay) {
          if (eventStart.toISOString().split("T")[0] <= dateString && eventEnd.toISOString().split("T")[0] >= dateString) {
            fullDayEvents.push(event);
          }
          return; // Skip further processing for full-day events
        }
        if (eventStart.toISOString().split("T")[0] <= dateString && eventEnd.toISOString().split("T")[0] >= dateString) {
          var currentSlot = new Date(eventStart);
          while (currentSlot <= eventEnd) {
            var slotDateString = currentSlot.toISOString().split("T")[0];
            if (slotDateString === dateString) {
              var slotIndex = currentSlot.getHours() * 2 + (currentSlot.getMinutes() >= 30 ? 1 : 0);
              if (dayTimeSlots[slotIndex]) {
                dayTimeSlots[slotIndex].events.push(event);
              }
            }
            currentSlot.setMinutes(currentSlot.getMinutes() + 30);
          }
        }
      });
      weekEvents.push({
        date: dateString,
        fullDayEvents: fullDayEvents,
        timeSlots: dayTimeSlots
      });
    };
    for (var i = 0; i < 7; i++) {
      _loop();
    }
    return weekEvents;
  };
  return {
    getMonthCalendar: getMonthCalendar,
    addEvent: addEvent,
    getWeekEvents: getWeekEvents
  };
};

/* eslint-disable @typescript-eslint/explicit-function-return-type */
var useDayViewStyles = function useDayViewStyles() {
  var styles = {
    container: css({
      display: "flex",
      flexDirection: "column",
      width: "calc(100% - 40px)",
      height: "100vh",
      overflow: "hidden",
      padding: "20px"
    }),
    header: css({
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      marginBottom: "16px",
      borderBottom: "1px solid " + tokens.colorNeutralStroke1
    }),
    dayGrid: css({
      display: "grid",
      gridTemplateColumns: "80px 1fr",
      gridTemplateRows: "50px 40px repeat(48, 33px)",
      height: "calc(100vh - 100px)",
      overflowY: "auto",
      border: "1px solid " + tokens.colorNeutralStroke1,
      maxHeight: "fit-content",
      scrollbarWidth: "thin",
      scrollbarColor: tokens.colorBrandBackground + " " + tokens.colorNeutralBackground1,
      "&::-webkit-scrollbar": {
        width: "8px"
      },
      "&::-webkit-scrollbar-track": {
        background: tokens.colorNeutralBackground1
      },
      "&::-webkit-scrollbar-thumb": {
        background: tokens.colorBrandBackground,
        borderRadius: "4px"
      },
      "&::-webkit-scrollbar-thumb:hover": {
        background: tokens.colorBrandBackgroundHover
      }
    }),
    blankHeader: css({
      gridColumn: "1",
      backgroundColor: tokens.colorNeutralBackground3,
      borderBottom: "3px solid " + tokens.colorNeutralStroke3
    }),
    timeColumn: css({
      gridColumn: "1",
      gridRow: "3 / span 49",
      display: "flex",
      flexDirection: "column",
      backgroundColor: tokens.colorNeutralBackground1,
      borderRight: "1px solid " + tokens.colorNeutralStroke1
    }),
    timeCell: css({
      height: "100%",
      maxHeight: "32px",
      minHeight: "32px",
      display: "flex",
      alignItems: "center",
      fontSize: "12px",
      color: tokens.colorNeutralForeground3,
      borderBottom: "1px solid " + tokens.colorNeutralStroke1,
      justifyContent: "center"
    }),
    fullDayRow: css({
      gridRow: "2",
      display: "grid",
      gridTemplateColumns: "80px 33px",
      gap: "0",
      padding: "0",
      backgroundColor: tokens.colorNeutralBackground2,
      borderBottom: "3px solid " + tokens.colorNeutralStroke2
    }),
    fullDayLabel: css({
      gridColumn: "1",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      alignContent: "center",
      color: tokens.colorBrandBackground,
      padding: "5px",
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      borderBottom: "3px solid " + tokens.colorNeutralStroke2
    }),
    fullDayCell: css({
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      display: "flex",
      flexDirection: "row",
      gap: "2px",
      padding: "4px",
      borderBottom: "3px solid " + tokens.colorNeutralStroke2,
      overflow: "hidden"
    }),
    fullDayEvent: css({
      flex: "1 1 auto",
      minWidth: "24px",
      height: "24px",
      padding: "4px 8px",
      backgroundColor: tokens.colorBrandBackground,
      color: tokens.colorNeutralForegroundOnBrand,
      borderRadius: "4px",
      overflow: "hidden",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }),
    dayHeaderCell: css({
      textAlign: "center",
      backgroundColor: tokens.colorNeutralBackground2,
      padding: "8px",
      fontWeight: "bold",
      borderBottom: "1px solid " + tokens.colorNeutralStroke1
    }),
    todayHeaderCell: css({
      borderTop: "5px solid " + tokens.colorBrandBackground
    }),
    eventCard: css({
      alignItems: "center",
      justifyContent: "center",
      marginRight: "2px",
      zIndex: 1,
      position: "absolute",
      alignContent: "center",
      overflow: "hidden"
    }),
    dayCell: css({
      borderBottom: "1px solid " + tokens.colorNeutralStroke1,
      borderRight: "1px solid " + tokens.colorNeutralStroke1,
      position: "relative",
      overflow: "visible",
      FlexDirection: "column",
      gap: "4px"
    }),
    currentTimeIndicator: css({
      position: "absolute",
      left: 0,
      height: "2px",
      backgroundColor: tokens.colorPaletteRedBorderActive,
      width: "100%",
      zIndex: 1
    }),
    currentHalfHourCell: css({
      border: "2px solid " + tokens.colorPaletteRedBorderActive
    }),
    eventTitle: css({
      display: "-webkit-box",
      "-webkit-line-clamp": "1",
      "-webkit-box-orient": "vertical",
      textAlign: "start",
      textOverflow: "ellipsis",
      paddingLeft: "8px",
      wordBreak: "break-word",
      overflow: "hidden"
    })
  };
  var applyEventHouverColorClass = function applyEventHouverColorClass(backgroundColor, houveColor) {
    return css({
      backgroundColor: backgroundColor != null ? backgroundColor : tokens.colorBrandBackground,
      ":hover": {
        backgroundColor: houveColor != null ? houveColor : tokens.colorBrandBackgroundHover
      }
    });
  };
  return {
    styles: styles,
    applyEventHouverColorClass: applyEventHouverColorClass
  };
};

var ROW_HEIGHT = 33;
var DayView = function DayView(props) {
  var events = props.events,
    currentDay = props.currentDay,
    height = props.height;
  var _useDayViewStyles = useDayViewStyles(),
    styles = _useDayViewStyles.styles;
  var _useState = useState(currentDay),
    currentDate = _useState[0];
  var calendarRef = useRef(null);
  var _useUtils = useUtils(),
    getSpanSlots = _useUtils.getSpanSlots,
    generateColor = _useUtils.generateColor;
  var timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var _useCalendar = useCalendar(events, timeZone),
    getWeekEvents = _useCalendar.getWeekEvents;
  var renderTimeColumn = useCallback(function () {
    return Array.from({
      length: 24
    }, function (_, hour) {
      return createElement(Fragment, {
        key: hour
      }, createElement("div", {
        className: styles.timeCell
      }, createElement(Body1Strong, null, " ", hour, ":00 ")), createElement("div", {
        className: styles.timeCell
      }));
    });
  }, [styles.timeCell]);
  var renderDayHeaders = useCallback(function () {
    return createElement(Fragment, null, createElement("div", {
      className: styles.blankHeader
    }), Array.from({
      length: 1
    }, function (_, dayIndex) {
      var day = addDays(currentDate, dayIndex);
      var isTodayClass = isToday(day) ? styles.todayHeaderCell : "";
      return createElement("div", {
        key: dayIndex,
        className: mergeClasses(styles.dayHeaderCell, isTodayClass)
      }, createElement(Text, {
        weight: "semibold",
        size: 600,
        style: {
          paddingRight: 10
        }
      }, format$1(day, "dd")), createElement(Subtitle1, null, format$1(day, "LLLL, yyyy")));
    }));
  }, [currentDate, styles.blankHeader, styles.dayHeaderCell, styles.todayHeaderCell]);
  var renderFullDayEvents = useCallback(function () {
    var weekEvents = getWeekEvents(currentDate.toISOString());
    return createElement(Fragment, null, createElement("div", {
      className: styles.fullDayLabel
    }, createElement(Body1, null, "All Day")), Array.from({
      length: 1
    }, function (_, dayIndex) {
      var weekDay = format$1(addDays(currentDate, dayIndex), "yyyy-MM-dd");
      var dayEvents = weekEvents.find(function (day) {
        return day.date === weekDay;
      });
      var fullDayEvents = (dayEvents == null ? void 0 : dayEvents.fullDayEvents) || [];
      return createElement("div", {
        key: dayIndex,
        className: styles.fullDayCell
      }, fullDayEvents.map(function (event) {
        return createElement("div", {
          key: event.id,
          className: styles.fullDayEvent,
          style: {
            gridColumn: "" + (dayIndex + 2),
            backgroundColor: generateColor(event.title)
          }
        }, createElement(Body1, {
          className: styles.eventTitle
        }, event.title));
      }));
    }));
  }, [currentDate, generateColor, getWeekEvents, styles.fullDayCell, styles.fullDayEvent, styles.fullDayLabel, styles.eventTitle]);
  // Render the events for the current day
  var renderDayCells = useCallback(function () {
    var weekEvents = getWeekEvents(currentDate.toISOString());
    // Render the events for the current day
    return Array.from({
      length: 1
    }, function (_, dayIndex) {
      var weekDay = format$1(addDays(currentDate, dayIndex), "yyyy-MM-dd");
      var dayEvents = weekEvents.find(function (day) {
        return day.date === weekDay;
      });
      return createElement(Fragment, null, dayEvents == null ? void 0 : dayEvents.timeSlots.map(function (timeSlot, slotIndex) {
        var eventCount = timeSlot.events.length; // Total events in the slot
        return createElement("div", {
          key: slotIndex,
          className: styles.dayCell,
          style: {
            gridRow: slotIndex + 3
          }
        }, timeSlot.events.map(function (event, eventIndex) {
          var startDate = new Date(event.start);
          var endDate = new Date(event.end);
          // Calculate the start and end slots based on event times
          var _getSpanSlots = getSpanSlots(startDate, endDate),
            spanSlots = _getSpanSlots.spanSlots,
            startSlot = _getSpanSlots.startSlot;
          // Only render the event in its starting timeslot
          if (slotIndex === startSlot) {
            var customRender = event == null ? void 0 : event.onRenderInDayView;
            // If the event has a custom renderer, use it
            if (isValidElement(customRender)) {
              return cloneElement(customRender, {});
            }
            // Event Render
            return createElement(EventRenderer, {
              key: event.id,
              event: event,
              eventCount: eventCount,
              spanSlots: spanSlots,
              rowHeight: ROW_HEIGHT,
              eventIndex: eventIndex,
              view: "day"
            });
          }
          return null; // Skip rendering for non-starting slots
        }));
      }));
    });
  }, [currentDate, getSpanSlots, getWeekEvents, styles.dayCell]);
  return createElement("div", {
    className: styles.container,
    style: {
      height: height
    }
  }, createElement("div", {
    ref: calendarRef,
    className: styles.dayGrid
  }, createElement("div", {
    className: styles.timeColumn
  }, renderTimeColumn()), renderDayHeaders(), renderFullDayEvents(), renderDayCells()));
};

var ECalendarViews;
(function (ECalendarViews) {
  ECalendarViews["Day"] = "day";
  ECalendarViews["Week"] = "week";
  ECalendarViews["Month"] = "month";
})(ECalendarViews || (ECalendarViews = {}));

/* eslint-disable @typescript-eslint/no-var-requires */
var SelectCalendarView = function SelectCalendarView(props) {
  var onSelected = props.onSelected,
    value = props.value;
  // State for selected view
  var _React$useState = useState(value != null ? value : ECalendarViews.Month),
    selectedView = _React$useState[0],
    setSelectedView = _React$useState[1];
  var _React$useState2 = useState({
      view: [value != null ? value : ECalendarViews.Month]
    }),
    checkedValues = _React$useState2[0],
    setCheckedValues = _React$useState2[1];
  var DayView = bundleIcon(CalendarDayFilled, CalendarDayRegular);
  var MonthView = bundleIcon(CalendarMonthFilled, CalendarMonthRegular);
  var WeekView = bundleIcon(CalendarWorkWeekFilled, CalendarWorkWeekRegular);
  useEffect(function () {
    // Synchronize selectedView with props
    if (value !== undefined) {
      setSelectedView(value);
      setCheckedValues({
        view: [value]
      });
    }
  }, [value]);
  var _React$useState3 = useState(false),
    open = _React$useState3[0],
    setOpen = _React$useState3[1];
  var onOpenChange = function onOpenChange(_e, data) {
    setOpen(data.open);
  };
  var viewIcon = useCallback(function () {
    switch (selectedView) {
      case ECalendarViews.Month:
        return createElement(MonthView, null);
      case ECalendarViews.Week:
        return createElement(WeekView, null);
      case ECalendarViews.Day:
        return createElement(DayView, null);
      default:
        return createElement(MonthView, null);
    }
  }, [selectedView]);
  var getViewLabel = useCallback(function (view) {
    switch (view) {
      case ECalendarViews.Month:
        return "Month";
      case ECalendarViews.Week:
        return "Week";
      case ECalendarViews.Day:
        return "Day";
      default:
        return "Month";
    }
  }, []);
  var onCheckedValueChange = useCallback(function (_e, _ref) {
    var name = _ref.name,
      checkedItems = _ref.checkedItems;
    if (name === "view") {
      var newView = checkedItems[0];
      setSelectedView(newView);
      setCheckedValues({
        view: checkedItems
      });
      onSelected(newView);
    }
  }, [onSelected]);
  return createElement(Fragment, null, createElement(Menu, {
    open: open,
    onOpenChange: onOpenChange
  }, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    shape: "circular",
    icon: viewIcon(),
    style: {
      minWidth: "150px"
    }
  }, getViewLabel(selectedView))), createElement(MenuPopover, null, createElement(MenuList, {
    onCheckedValueChange: onCheckedValueChange,
    checkedValues: checkedValues
  }, createElement(MenuItemRadio, {
    icon: createElement(DayView, null),
    name: "view",
    value: ECalendarViews.Day
  }, "Day"), createElement(MenuItemRadio, {
    icon: createElement(WeekView, null),
    name: "view",
    value: ECalendarViews.Week
  }, "Week"), createElement(MenuItemRadio, {
    icon: createElement(MonthView, null),
    name: "view",
    value: ECalendarViews.Month
  }, "Month")))));
};

var SelectDay = /*#__PURE__*/memo(function (props) {
  var onSelected = props.onSelected,
    value = props.value;
  // State for selected date
  var _React$useState = useState(value != null ? value : new Date()),
    selectedDate = _React$useState[0],
    setSelectedDate = _React$useState[1];
  var _React$useState2 = useState(function () {
      var initialDate = value != null ? value : new Date();
      return format(initialDate, 'dd MMM, yyyy');
    }),
    selectedLabel = _React$useState2[0],
    setSelectedLabel = _React$useState2[1];
  var _React$useState3 = useState(false),
    open = _React$useState3[0],
    setOpen = _React$useState3[1];
  var onOpenChange = useCallback(function (_e, data) {
    setOpen(data.open);
  }, []);
  var MonthIcon = useMemo(function () {
    return bundleIcon(CalendarMonthFilled, CalendarMonthRegular);
  }, []);
  var onSelectDate = useCallback(function (date) {
    if (date) {
      var timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      var zonedDate = utcToZonedTime(date, timeZone);
      setSelectedDate(zonedDate);
      setSelectedLabel(format(zonedDate, 'dd MMM, yyyy'));
      onSelected(zonedDate);
      setOpen(false);
    }
  }, [onSelected]);
  return createElement(Menu, {
    open: open,
    onOpenChange: onOpenChange
  }, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    shape: "circular",
    icon: createElement(MonthIcon, null),
    style: {
      minWidth: '200px'
    }
  }, selectedLabel)), createElement(MenuPopover, {
    style: {
      maxWidth: 'fit-content'
    }
  }, createElement(MenuList, null, createElement(Calendar, {
    highlightSelectedMonth: true,
    showGoToToday: true,
    onSelectDate: onSelectDate,
    value: selectedDate
  }))));
});

var useCalendarStyles$1 = function useCalendarStyles() {
  return {
    root: css({
      outlineStyle: "none !important"
    })
  };
};
/* const dateStrings = {
  months: [
    "Gennaio",
    "Febbraio",
    "Marzo",
    "Aprile",
    "Maggio",
    "Giugno",
    "Luglio",
    "Agosto",
    "Settembre",
    "Ottobre",
    "Novembre",
    "Dicembre",
  ],
  shortMonths: [
    "Gen",
    "Feb",
    "Mar",
    "Apr",
    "Mag",
    "Giu",
    "Lug",
    "Ago",
    "Set",
    "Ott",
    "Nov",
    "Dic",
  ],
  goToToday: "Vai a oggi",
  days: [
    "Domenica",
    "Lunedì",
    "Martedì",
    "Mercoledì",
    "Giovedì",
    "Venerdì",
    "Sabato",
  ],
  shortDays: [
    "Dom",
    "Lun",
    "Mar",
    "Mer",
    "Gio",
    "Ven",
    "Sab",
  ],
}; */
var CalendarMonth = function CalendarMonth(props) {
  var onDateChange = props.onDateChange,
    defaultSelectedDate = props.defaultSelectedDate,
    onDismiss = props.onDismiss;
  var styles = useCalendarStyles$1();
  var _React$useState = useState(defaultSelectedDate != null ? defaultSelectedDate : new Date()),
    selectedDate = _React$useState[0],
    setSelectedDate = _React$useState[1];
  var onSelectDate = useCallback(function (date, _selectedDateRangeArray) {
    setSelectedDate(date);
    onDateChange(date);
    onDismiss();
  }, []);
  return createElement(Fragment, null, createElement(Calendar, {
    className: styles.root,
    dateRangeType: DateRangeType.Month,
    highlightSelectedMonth: true,
    isDayPickerVisible: false,
    onSelectDate: onSelectDate,
    value: selectedDate,
    onDismiss: onDismiss,
    showGoToToday: false,
    allFocusable: false
  }));
};

/* eslint-disable @typescript-eslint/no-var-requires */
var SelectMonth = function SelectMonth(props) {
  var onSelected = props.onSelected,
    value = props.value;
  var Calendar = bundleIcon(CalendarMonthFilled, CalendarMonthRegular);
  var _React$useState = useState(value != null ? value : new Date()),
    selectedDate = _React$useState[0],
    setSelectedDate = _React$useState[1];
  useEffect(function () {
    onSelected(value != null ? value : new Date());
    setSelectedDate(value != null ? value : new Date());
  }, [value]);
  var _React$useState2 = useState(false),
    open = _React$useState2[0],
    setOpen = _React$useState2[1];
  var onOpenChange = function onOpenChange(_e, data) {
    setOpen(data.open);
  };
  var onDateChange = useCallback(function (date) {
    onSelected(date);
    setSelectedDate(date);
  }, []);
  return createElement(Fragment, null, createElement(Menu, {
    open: open,
    onOpenChange: onOpenChange
  }, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    shape: "circular",
    icon: createElement(Calendar, null),
    style: {
      minWidth: "200px"
    }
  }, format$1(selectedDate, "MMMM yyyy"))), createElement(MenuPopover, null, createElement(MenuList, null, createElement(CalendarMonth, {
    onDateChange: onDateChange,
    defaultSelectedDate: selectedDate,
    onDismiss: function onDismiss() {
      setOpen(false);
    }
  })))));
};

var formatWeekLabel = function formatWeekLabel(week) {
  var timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var startMonth = format(week.start, 'MMM', {
    timeZone: timeZone
  });
  var endMonth = format(week.end, 'MMM', {
    timeZone: timeZone
  });
  var startYear = format(week.start, 'yyyy', {
    timeZone: timeZone
  });
  var endYear = format(week.end, 'yyyy', {
    timeZone: timeZone
  });
  if (startYear !== endYear) {
    return format(week.start, 'dd MMM yyyy', {
      timeZone: timeZone
    }) + " - " + format(week.end, 'dd MMM yyyy', {
      timeZone: timeZone
    });
  } else if (startMonth !== endMonth) {
    return format(week.start, 'dd MMM', {
      timeZone: timeZone
    }) + " - " + format(week.end, 'dd MMM yyyy', {
      timeZone: timeZone
    });
  } else {
    return format(week.start, 'dd', {
      timeZone: timeZone
    }) + " - " + format(week.end, 'dd MMM yyyy', {
      timeZone: timeZone
    });
  }
};
// Helper function to get the start and end dates of the week
var getWeekRange = function getWeekRange(date) {
  var timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var zonedDate = utcToZonedTime(date, timeZone);
  var start = new Date(zonedDate);
  start.setDate(zonedDate.getDate() - zonedDate.getDay()); // Start of the week (Sunday)
  var end = new Date(start);
  end.setDate(start.getDate() + 6); // End of the week (Saturday)
  return {
    start: utcToZonedTime(start, timeZone),
    end: utcToZonedTime(end, timeZone)
  };
};
var SelectWeek = /*#__PURE__*/memo(function (props) {
  var onSelected = props.onSelected,
    value = props.value;
  var dateRangeType = DateRangeType.Week;
  // State for selected week
  var _React$useState = useState(value != null ? value : new Date()),
    selectedDate = _React$useState[0],
    setSelectedDate = _React$useState[1];
  var _React$useState2 = useState(function () {
      var newValue = value != null ? value : new Date();
      if (newValue) {
        var weekRange = getWeekRange(newValue);
        return formatWeekLabel(weekRange);
      }
      return 'Select a week';
    }),
    selectedWeek = _React$useState2[0],
    setSelectedWeek = _React$useState2[1];
  var _React$useState3 = useState(false),
    open = _React$useState3[0],
    setOpen = _React$useState3[1];
  var onOpenChange = useCallback(function (_e, data) {
    setOpen(data.open);
  }, []);
  var MonthIcon = useMemo(function () {
    return bundleIcon(CalendarMonthFilled, CalendarMonthRegular);
  }, []);
  var onSelectDate = useCallback(function (date) {
    if (date) {
      setSelectedDate(date);
      var weekRange = getWeekRange(date);
      var weekLabel = formatWeekLabel(weekRange);
      setSelectedWeek(weekLabel);
      onSelected({
        startDate: weekRange.start,
        endDate: weekRange.end
      });
      setOpen(false);
    }
  }, [getWeekRange, formatWeekLabel, onSelected]);
  var firstDayOfWeek = useMemo(function () {
    return 0;
  }, []); // Week starts on Sunday
  return createElement(Menu, {
    open: open,
    onOpenChange: onOpenChange
  }, createElement(MenuTrigger, {
    disableButtonEnhancement: true
  }, createElement(MenuButton, {
    shape: "circular",
    icon: createElement(MonthIcon, null),
    style: {
      minWidth: '200px'
    }
  }, selectedWeek)), createElement(MenuPopover, {
    style: {
      maxWidth: 'fit-content'
    }
  }, createElement(MenuList, null, createElement(Calendar, {
    dateRangeType: dateRangeType,
    highlightSelectedMonth: true,
    showGoToToday: true,
    onSelectDate: onSelectDate,
    value: selectedDate,
    firstDayOfWeek: firstDayOfWeek
  }))));
});

var Toolbar = /*#__PURE__*/memo(function (_ref) {
  var selectedView = _ref.selectedView,
    onSelectedView = _ref.onSelectedView,
    currentDate = _ref.currentDate,
    setCurrentDate = _ref.setCurrentDate,
    onWeekChange = _ref.onWeekChange,
    onMonthChange = _ref.onMonthChange,
    onDayChange = _ref.onDayChange;
  var ArrowDown = bundleIcon(ArrowDownFilled, ArrowDownRegular);
  var ArrowUp = bundleIcon(ArrowUpFilled, ArrowUpRegular);
  var onSelectWeek = function onSelectWeek(week) {
    onWeekChange(week.startDate);
    setCurrentDate(week.startDate);
  };
  var onSelectMonth = function onSelectMonth(month) {
    onMonthChange(month);
    setCurrentDate(month);
  };
  var onSelectDay = function onSelectDay(day) {
    onDayChange(day);
    setCurrentDate(day);
  };
  var RenderSelectView = function RenderSelectView() {
    switch (selectedView) {
      case ECalendarViews.Month:
        return createElement(SelectMonth, {
          onSelected: onSelectMonth,
          value: currentDate
        });
      case ECalendarViews.Week:
        return createElement(SelectWeek, {
          onSelected: onSelectWeek,
          value: currentDate
        });
      case ECalendarViews.Day:
        return createElement(SelectDay, {
          onSelected: onSelectDay,
          value: currentDate
        });
      default:
        return createElement(SelectMonth, {
          onSelected: onSelectMonth,
          value: currentDate
        });
    }
  };
  var RenderToday = function RenderToday() {
    return createElement(Tooltip, {
      content: "Today",
      relationship: "label"
    }, createElement(Button$1, {
      shape: "circular",
      icon: createElement(CalendarTodayRegular, null),
      size: "medium",
      onClick: function onClick() {
        return onDayChange(new Date());
      }
    }, "Today"));
  };
  var handleNavigation = function handleNavigation(offset) {
    var newDate = new Date(currentDate);
    switch (selectedView) {
      case ECalendarViews.Month:
        newDate.setMonth(newDate.getMonth() + offset);
        onMonthChange(newDate);
        break;
      case ECalendarViews.Week:
        newDate.setDate(newDate.getDate() + offset * 7);
        onWeekChange(newDate);
        break;
      case ECalendarViews.Day:
        newDate.setDate(newDate.getDate() + offset);
        onDayChange(newDate);
        break;
    }
    setCurrentDate(newDate);
  };
  return createElement(Stack, {
    width: "calc(100% - 40px)",
    height: "fit-content",
    horizontal: true,
    horizontalAlign: "space-between",
    verticalAlign: "center",
    paddingLeft: "20px",
    paddingRight: "20px",
    paddingBottom: "10px",
    paddingTop: "10px",
    columnGap: 10,
    styles: {
      overflow: "hidden"
    }
  }, createElement(Stack, {
    horizontal: true,
    horizontalAlign: "start",
    verticalAlign: "center",
    columnGap: 10
  }, createElement(RenderToday, null), createElement(RenderSelectView, null), createElement(Tooltip, {
    content: "Previous",
    relationship: "label"
  }, createElement(Button$1, {
    size: "medium",
    icon: createElement(ArrowUp, {
      fontSize: 14
    }),
    onClick: function onClick() {
      return handleNavigation(-1);
    }
  })), createElement(Tooltip, {
    content: "Next",
    relationship: "label"
  }, createElement(Button$1, {
    size: "medium",
    icon: createElement(ArrowDown, {
      fontSize: 14
    }),
    onClick: function onClick() {
      return handleNavigation(1);
    }
  }))), createElement(Stack, {
    horizontal: true,
    horizontalAlign: "start",
    verticalAlign: "center",
    columnGap: 10
  }, createElement(SelectCalendarView, {
    onSelected: onSelectedView,
    value: selectedView
  })));
});

var WeekView = function WeekView(props) {
  var events = props.events,
    currentDay = props.currentDay,
    height = props.height;
  var _useWeekViewStyles = useWeekViewStyles(),
    styles = _useWeekViewStyles.styles;
  var _useState = useState(currentDay),
    currentDate = _useState[0];
  var _useState2 = useState(32),
    rowHeight = _useState2[0],
    setRowHeight = _useState2[1]; // Default row height
  var calendarRef = useRef(null);
  var _useUtils = useUtils(),
    getSpanSlots = _useUtils.getSpanSlots;
  var weekStart = startOfWeek(currentDate, {
    weekStartsOn: 0
  });
  var timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  var _useCalendar = useCalendar(events, timeZone),
    getWeekEvents = _useCalendar.getWeekEvents;
  // Dynamic row height calculation using ResizeObserver
  useEffect(function () {
    var observer = new ResizeObserver(function () {
      if (calendarRef.current) {
        var firstRowCell = calendarRef.current.querySelector(".dayCell");
        if (firstRowCell) {
          setRowHeight(firstRowCell.offsetHeight);
        }
      }
    });
    if (calendarRef.current) {
      observer.observe(calendarRef.current);
    }
    return function () {
      observer.disconnect();
    };
  }, [calendarRef]);
  var generateColor = useCallback(function (str) {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    var c = (hash & 0x00ffffff).toString(16).toUpperCase();
    return "#" + ("00000".substring(0, 6 - c.length) + c);
  }, []);
  var renderTimeColumn = useCallback(function () {
    return Array.from({
      length: 24
    }, function (_, hour) {
      return createElement(Fragment, {
        key: hour
      }, createElement("div", {
        className: styles.timeCell
      }, createElement(Body1Strong, null, " ", hour, ":00 ")), createElement("div", {
        className: styles.timeCell
      }));
    });
  }, []);
  var renderDayHeaders = useCallback(function () {
    return createElement(Fragment, null, createElement("div", {
      className: styles.blankHeader
    }), Array.from({
      length: 7
    }, function (_, dayIndex) {
      var day = addDays(weekStart, dayIndex);
      var isTodayClass = isToday(day) ? styles.todayHeaderCell : "";
      return createElement("div", {
        key: dayIndex,
        className: mergeClasses(styles.dayHeaderCell, isTodayClass)
      }, createElement(Text, {
        weight: "regular",
        size: 600,
        style: {
          paddingRight: 10
        }
      }, format$1(day, "dd")), createElement(Body1, null, format$1(day, "EEE")));
    }));
  }, [weekStart, styles]);
  var renderFullDayEvents = useCallback(function () {
    var weekEvents = getWeekEvents(weekStart.toISOString());
    return createElement(Fragment, null, createElement("div", {
      className: styles.fullDayLabel
    }, createElement(Body1, null, "All Day")), Array.from({
      length: 7
    }, function (_, dayIndex) {
      var weekDay = format$1(addDays(weekStart, dayIndex), "yyyy-MM-dd");
      var dayEvents = weekEvents.find(function (day) {
        return day.date === weekDay;
      });
      var fullDayEvents = (dayEvents == null ? void 0 : dayEvents.fullDayEvents) || [];
      return createElement("div", {
        key: dayIndex,
        className: styles.fullDayCell
      }, fullDayEvents.map(function (event) {
        return createElement("div", {
          key: event.id,
          className: styles.fullDayEvent,
          style: {
            gridColumn: "" + (dayIndex + 2),
            backgroundColor: generateColor(event.title)
          }
        }, createElement(Body1, {
          className: styles.eventTitle
        }, event.title));
      }));
    }));
  }, [weekStart, styles, getWeekEvents, generateColor]);
  var renderDayCells = useCallback(function () {
    var weekEvents = getWeekEvents(weekStart.toISOString());
    return Array.from({
      length: 7
    }, function (_, dayIndex) {
      var weekDay = format$1(addDays(weekStart, dayIndex), "yyyy-MM-dd");
      var dayEvents = weekEvents.find(function (day) {
        return day.date === weekDay;
      });
      return createElement(Fragment, null, dayEvents == null ? void 0 : dayEvents.timeSlots.map(function (timeSlot, slotIndex) {
        var eventCount = timeSlot.events.length; // Total events in the slot
        return createElement("div", {
          key: slotIndex,
          className: styles.dayCell,
          style: {
            gridRow: slotIndex + 3
          }
        }, timeSlot.events.map(function (event, eventIndex) {
          var startDate = new Date(event.start);
          var endDate = new Date(event.end);
          // Calculate the start and end slots based on event times
          var _getSpanSlots = getSpanSlots(startDate, endDate),
            spanSlots = _getSpanSlots.spanSlots,
            startSlot = _getSpanSlots.startSlot;
          // Only render the event in its starting timeslot
          if (slotIndex === startSlot) {
            var customRender = event == null ? void 0 : event.onRenderInWeekView;
            // If the event has a custom renderer, use it
            if (isValidElement(customRender)) {
              return cloneElement(customRender, {});
            }
            // Event Render
            return createElement(EventRenderer, {
              key: event.id,
              event: event,
              eventCount: eventCount,
              spanSlots: spanSlots,
              rowHeight: rowHeight,
              eventIndex: eventIndex,
              view: "week"
            });
          }
          return null; // Skip rendering for non-starting slots
        }));
      }));
    });
  }, [weekStart, styles, getWeekEvents, getSpanSlots, rowHeight]);
  return createElement("div", {
    className: styles.container,
    style: {
      height: height
    }
  }, createElement("div", {
    ref: calendarRef,
    className: styles.weekGrid
  }, createElement("div", {
    className: styles.timeColumn
  }, renderTimeColumn()), renderDayHeaders(), renderFullDayEvents(), renderDayCells()));
};

var daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
var CalendarControl = function CalendarControl(props) {
  var _useCalendarStyles = useCalendarStyles(),
    styles = _useCalendarStyles.styles;
  var calendarRef = useRef(null);
  var _useState = useState(null),
    rowHeight = _useState[0],
    setRowHeight = _useState[1];
  var events = props.events,
    _props$height = props.height,
    height = _props$height === void 0 ? 800 : _props$height,
    theme = props.theme,
    onDayChange = props.onDayChange,
    onMonthChange = props.onMonthChange,
    onWeekChange = props.onWeekChange,
    onViewChange = props.onViewChange;
  var rowHeightRef = useRef(0);
  // Default current date
  var _useState2 = useState(new Date()),
    currentDate = _useState2[0],
    setCurrentDate = _useState2[1];
  // Default view
  var _useState3 = useState(ECalendarViews.Month),
    selectedView = _useState3[0],
    setSelectedView = _useState3[1];
  // Get month calendar
  var _useCalendar = useCalendar(events, Intl.DateTimeFormat().resolvedOptions().timeZone),
    getMonthCalendar = _useCalendar.getMonthCalendar;
  // Get calendar days
  var getCalendarDays = useCallback(function (date) {
    var month = date.getMonth();
    var firstDayOfMonth = startOfMonth(date);
    var firstDayOfWeek = startOfWeek(firstDayOfMonth);
    var totalDisplayedDays = 42;
    // Generate calendar days
    var calendarDays = Array.from({
      length: totalDisplayedDays
    }, function (_, index) {
      var relativeDay = addDays(firstDayOfWeek, index);
      return {
        day: relativeDay.getDate(),
        currentMonth: relativeDay.getMonth() === month,
        date: relativeDay
      };
    });
    return calendarDays;
  }, []);
  // Handle month change
  var handleMonthChange = useCallback(function (date) {
    if (onMonthChange) {
      onMonthChange(date);
    }
    setCurrentDate(date);
  }, [currentDate]);
  // Handle day change
  var handleDayChange = useCallback(function (date) {
    if (onDayChange) {
      onDayChange(date);
    }
    setCurrentDate(date);
  }, [currentDate]);
  // Handle week change
  var handleWeekChange = useCallback(function (date) {
    if (onWeekChange) {
      onWeekChange(date);
    }
    setCurrentDate(date);
  }, [currentDate]);
  // Handle view change
  var handleViewChange = useCallback(function (view) {
    if (onViewChange) {
      onViewChange(view);
    }
    setSelectedView(view);
  }, [selectedView]);
  // Handle next
  // Get events for the day
  var getEventsForDay = useCallback(function (dateObj) {
    var _monthEvents$dayStrin;
    var date = dateObj.date;
    var monthEvents = getMonthCalendar(currentDate.getFullYear(), currentDate.getMonth());
    var dayString = date.toISOString().split("T")[0]; // Get date in YYYY-MM-DD format
    return ((_monthEvents$dayStrin = monthEvents[dayString]) == null ? void 0 : _monthEvents$dayStrin.flatMap(function (slot) {
      return slot;
    })) || [];
  }, [currentDate]);
  // Resize observer
  useEffect(function () {
    var handleResize = function handleResize() {
      // Get the height of the 8 column cell
      // the first column cell  until 7th column cell are headers
      if (calendarRef.current) {
        setTimeout(function () {
          if (calendarRef.current) {
            var firstDataColumnCell = calendarRef.current.querySelector("." + styles.calendarWrapper + " > div:nth-child(8)");
            if (firstDataColumnCell) {
              setRowHeight(firstDataColumnCell.offsetHeight);
              rowHeightRef.current = firstDataColumnCell.offsetHeight;
            }
          }
        }, 100); // 🔹 Delay to ensure elements are rendered
      }
    };
    var observer = new ResizeObserver(handleResize);
    if (calendarRef.current) {
      observer.observe(calendarRef.current);
    }
    handleResize();
    // fallback for resize
    window.addEventListener("resize", handleResize);
    return function () {
      observer.disconnect();
      window.removeEventListener("resize", handleResize);
    };
  }, [calendarRef]);
  // Toolbar component
  // Render Month View
  var RenderMonthView = memo(function () {
    return createElement(Stack, {
      height: height,
      width: "100%",
      verticalAlign: "start",
      horizontalAlign: "start"
    }, createElement("div", {
      className: styles.calendarWrapper,
      ref: calendarRef
    }, daysOfWeek.map(function (day) {
      return createElement(Body1, {
        key: day,
        className: styles.dayHeader
      }, day);
    }), getCalendarDays(currentDate).map(function (dateObj, index) {
      var day = dateObj.day,
        currentMonth = dateObj.currentMonth;
      var events = currentMonth ? getEventsForDay(dateObj) : [];
      return createElement(Day, {
        key: index,
        day: day,
        date: dateObj.date,
        currentMonth: dateObj.currentMonth,
        events: events,
        columnHeight: rowHeight || 0
      });
    })));
  });
  // Render Week View
  var RenderWeekView = memo(function () {
    return createElement(Fragment, null, selectedView === ECalendarViews.Week && createElement(WeekView, {
      events: events,
      currentDay: currentDate,
      height: height
    }));
  });
  // Render Day View
  var RenderDayView = memo(function () {
    return createElement(Fragment, null, selectedView === ECalendarViews.Day && createElement(DayView, {
      currentDay: currentDate,
      events: events,
      height: height
    }));
  });
  // Render content
  var RenderContent = useCallback(function () {
    switch (selectedView) {
      case ECalendarViews.Month:
        return createElement(RenderMonthView, null);
      case ECalendarViews.Week:
        return createElement(RenderWeekView, null);
      case ECalendarViews.Day:
        return createElement(RenderDayView, null);
      default:
        return createElement(RenderMonthView, null);
    }
  }, [selectedView, RenderMonthView, RenderWeekView, RenderDayView]);
  return createElement(Fragment, null, createElement(IdPrefixProvider, {
    value: "calendarControl-"
  }, createElement(FluentProvider, {
    theme: theme != null ? theme : webLightTheme
  }, createElement(Stack, {
    height: "100%",
    verticalAlign: "start"
  }, createElement(Toolbar, {
    selectedView: selectedView,
    onSelectedView: handleViewChange,
    currentDate: currentDate,
    setCurrentDate: setCurrentDate,
    onWeekChange: handleWeekChange,
    onMonthChange: handleMonthChange,
    onDayChange: handleDayChange
  }), createElement(RenderContent, null)))));
};

export { AspectRatio, Breadcrumb, CalendarControl, CalendarMonth, Card, Carousel, Center, CustomControlBar, DataGrid, DropdownField, GenericOverFlowMenu, Grid, Layout, LayoutItem, RenderDialog, RenderHeader, RenderLabel, RenderSpinner, SelectDay, SelectMonth, SelectWeek, ShareDialog, ShowMessage, Space, Stack, StackItem, useAspectRatioStyles, useCardStyles, useCarouselStyles, useCarouselStylesMain, useCenterStyles, useComponentUtils, useDataGridStyles, useDateFnsLocales, useGridStyles, useImageUtils, useLayoutStyles, usePrevNextButtons, useRenderHeaderStyles, useShowMessageStyles, useSpaceStyles, useStackStyles, useTimeZoneHelper };
//# sourceMappingURL=react-controls.esm.js.map
