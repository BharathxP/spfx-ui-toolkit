/* eslint-disable @typescript-eslint/no-explicit-any */
import { useCallback } from 'react';

const DEBUG = process.env.NODE_ENV !== 'production';

/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-use-before-define */
import { isEmpty } from 'lodash';

const DATA_IMAGE = "data:image/";

export const useImageUtils = () => {
 

  const base64FromSVGUrl = useCallback(async (url: string): Promise<string> => {
    const svg = await fetch(url).then((response) => response.text());
    const svg64 = btoa(svg);
    const b64Start = "data:image/svg+xml;base64,";
    const image64 = b64Start + svg64;
    return image64;
  }, []);

  const getImageBase64 = useCallback(async (pictureUrl: string, customWidth?: number, customHeight?: number): Promise<
    string
  > => {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.crossOrigin = "anonymous";
      image.addEventListener("load", () => {
        const tempCanvas = document.createElement("canvas");
        tempCanvas.width = customWidth ?? image.width;
        tempCanvas.height = customHeight ?? image.height;
        tempCanvas?.getContext("2d")?.drawImage(image, 0, 0, customWidth ?? image.width, customHeight ?? image.height);
        let base64Str;
        try {
          base64Str = tempCanvas.toDataURL("image/png", 1);
          resolve(base64Str);
        } catch (err) {
          if (DEBUG) {
            console.error(`[ImageService.getBase64Image]: Err='${(err as Error).message}'`);
          }
          reject(err);
        }
      });
      image.addEventListener("error", (err) => {
        if (DEBUG) {
          console.error(`[ImageService.getBase64Image]: Image load error='${err.message}'`);
        }
        reject(err);
      });
      image.src = pictureUrl;
    });
  }, []);

  const isBase64Image = useCallback((data: string) => {
    return !isEmpty(data) && data.indexOf(DATA_IMAGE) >= 0;
  }, []);

  const getBase64ImageFromDOMImg = useCallback((imgElementId: string): string | undefined => {
    try {
      const imgElement = document.getElementById(imgElementId) as any;
      const canvas = document.createElement("canvas");
      canvas.width = imgElement.width;
      canvas.height = imgElement.height;
      const ctx = canvas.getContext("2d");
      ctx?.drawImage(imgElement, 0, 0);
      const dataURL = canvas.toDataURL("image/png");

      return dataURL;
    } catch (err) {
      if (DEBUG) {
        console.error(`[getBase64ImageFromDOMImg]: Err='${(err as Error).message}'`);
      }
      return undefined;
    }
  }, []);

  return {
    getBase64ImageFromDOMImg,
    isBase64Image,
    getImageBase64,
    base64FromSVGUrl,
  };
};
