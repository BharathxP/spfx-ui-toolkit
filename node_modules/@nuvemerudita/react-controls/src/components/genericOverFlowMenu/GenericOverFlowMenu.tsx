/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-unused-vars */
import * as React from 'react';

import {
  Menu,
  MenuButton,
  MenuItem,
  MenuList,
  MenuPopover,
  MenuTrigger,
  useIsOverflowItemVisible,
  useOverflowMenu,
} from '@fluentui/react-components';

// Generic type for item
interface GenericOverFlowMenuProps<T> {
  items: T[];
  renderItem: (item: T) => React.ReactNode;
  keyExtractor: (item: T) => string;
}

const OverflowMenuItem = ({ id, children }: { id: string; children: React.ReactNode }) => {
  const isVisible = useIsOverflowItemVisible(id);

  if (isVisible) {
    return null;
  }

  return <MenuItem>{children}</MenuItem>;
};

export const GenericOverFlowMenu = <T extends { id: string }>({
  items,
  renderItem,
  keyExtractor,
}: GenericOverFlowMenuProps<T>) => {
  const { ref, overflowCount, isOverflowing } = useOverflowMenu<HTMLButtonElement>();

  if (!isOverflowing) {
    return null;
  }

  return (
    <Menu>
      <MenuTrigger disableButtonEnhancement>
        <MenuButton ref={ref}>+{overflowCount} items</MenuButton>
      </MenuTrigger>
      <MenuPopover>
        <MenuList>
          {items.map((item) => (
            <OverflowMenuItem key={keyExtractor(item)} id={keyExtractor(item)}>
              {renderItem(item)}
            </OverflowMenuItem>
          ))}
        </MenuList>
      </MenuPopover>
    </Menu>
  );
};
