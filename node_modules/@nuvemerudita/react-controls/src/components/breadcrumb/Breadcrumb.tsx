import {
    Button,
    Text,
    mergeClasses,
} from '@fluentui/react-components';
import React, { useEffect, useRef, useState } from 'react';

import { ChevronRightRegular } from '@fluentui/react-icons';
import { IBreadcrumbItem } from './IBreadcrumItem';
import { IBreadcrumbProps } from './IBreadcrumProps';
import OverflowMenu from './OverflowMenu'; // Import the OverflowMenu component
import { ResizeObserver } from '@juggle/resize-observer';
import { Stack } from '../Stack';
import { useBreadcrumStyles } from './useBreadcrumStyles';

// Utility: Debounce function to limit ResizeObserver calls
  const debounce = (func: (...args: any[]) => void, delay: number) => {
    let timeout: NodeJS.Timeout;
    return (...args: any[]) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };
  
  export const Breadcrumb: React.FC<IBreadcrumbProps> = ({
    items,
    maxWidth = '100%',
    styles: customStyles,
    theme,
    size = 'medium',
    currentIndex = items.length - 1,
    className,
  }) => {
    const { styles, getStyles } = useBreadcrumStyles();
    const containerRef = useRef<HTMLDivElement>(null);
    const [visibleItems, setVisibleItems] = useState<IBreadcrumbItem[]>([]);
    const [overflowItems, setOverflowItems] = useState<IBreadcrumbItem[]>([]);
  
    useEffect(() => {
      const updateVisibleItems = () => {
        if (!containerRef.current) return;
  
        const containerWidth = containerRef.current.offsetWidth;
        let currentWidth = 0;
        const visible: IBreadcrumbItem[] = [];
        const overflow: IBreadcrumbItem[] = [];
  
        items.forEach(item => {
          const estimatedWidth = 80; // Estimate width for each item (adjust if necessary)
          if (currentWidth + estimatedWidth <= containerWidth - 50) {
            visible.push(item);
            currentWidth += estimatedWidth;
          } else {
            overflow.push(item);
          }
        });
  
        setVisibleItems(visible);
        setOverflowItems(overflow);
      };
  
      const handleResize = debounce(updateVisibleItems, 100);
  
      // Set up ResizeObserver
      const resizeObserver = new ResizeObserver(() => {
        handleResize();
      });
  
      if (containerRef.current) {
        resizeObserver.observe(containerRef.current);
      }
  
      // Initial update
      updateVisibleItems();
  
      // Cleanup observer on unmount
      return () => {
        resizeObserver.disconnect();
      };
    }, [items]);
  
    return (
      
        <div
          ref={containerRef}
          className={mergeClasses(styles.container, className)}
          style={{ maxWidth, ...customStyles }}
        >
          <Stack horizontal verticalAlign="center" horizontalAlign="start">
            {visibleItems.map((item, index) => {
              return (
                <>
                  {index === currentIndex ? (
             <Stack
             horizontal
             verticalAlign="center"
             horizontalAlign="start"
             columnGap={5}
             styles={{ overflow: 'hidden' }}
           >
             {item.icon
               ? React.cloneElement(item.icon, {
                   style: { fontSize: size === 'large' ? '20px' : size === 'medium' ? '16px' : '12px' },
                 })
               : null}
             <Text
               key={item.label}
               className={mergeClasses(
                 styles.breadcrumbItem,
                 getStyles(item, size),
                 getStyles(item, 'current')
               )}
               aria-current="page"
             >
               {item.label}
             </Text>
           </Stack>
                  ) : (
                    <Button
                      icon={item.icon ? item.icon : null}
                      key={item.label}
                      appearance="transparent"
                      className={`${styles.breadcrumbItem}`}
                      onClick={item.onClick}
                    >
                      <Text className={getStyles(item, size)}>
                        {item.label}
                      </Text>
                    </Button>
                  )}
                  {index < visibleItems.length - 1 && (
                    <ChevronRightRegular
                      style={{
                        fontSize:
                          size === 'large'
                            ? '20px'
                            : size === 'medium'
                            ? '16px'
                            : '12px',
                      }}
                    />
                  )}
                </>
              );
            })}
  
            {overflowItems.length > 0 && (
              <OverflowMenu items={overflowItems} theme={theme} />
            )}
          </Stack>
        </div>
    
    );
  };
  
  export default Breadcrumb;
