import {
    Button,
    Card,
    FluentProvider,
    Text,
    Theme,
} from "@fluentui/react-components";
import React, { useEffect, useRef, useState } from "react";

import { IBreadcrumbItem } from "./IBreadcrumItem";
import { MoreHorizontalRegular } from "@fluentui/react-icons";
import { createPortal } from "react-dom";
import { useBreadcrumStyles } from "./useBreadcrumStyles";

interface OverflowMenuProps {
    items:  IBreadcrumbItem[];
    theme?: Theme; // Fluent UI theme
    size?: 'small' | 'medium' | 'large'; // Add size property
  }
  
  export const OverflowMenu: React.FC<OverflowMenuProps> = ({ items, theme , size="medium"}) => {
    const [showDropdown, setShowDropdown] = useState(false);
    const buttonRef = useRef<HTMLButtonElement>(null);
    const dropdownRef = useRef<HTMLDivElement>(null);
    const [dropdownStyles, setDropdownStyles] = useState<React.CSSProperties>({
      top: 0,
      left: 0,
      position: "absolute",
    });

    const { getStyles} = useBreadcrumStyles();
  
    const handleButtonClick = () => {
      if (buttonRef.current) {
        const buttonRect = buttonRef.current.getBoundingClientRect();
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
  
        const dropdownWidth = dropdownRef.current?.offsetWidth || 200; // Fallback to 200px width
        const dropdownHeight = dropdownRef.current?.offsetHeight || 100; // Fallback to 100px height
  
        let top = buttonRect.bottom + window.scrollY;
        let left = buttonRect.left + window.scrollX;
  
        // Adjust for right edge
        if (left + dropdownWidth > viewportWidth) {
          left = viewportWidth - dropdownWidth - 10; // Add some padding from the edge
        }
  
        // Adjust for bottom edge
        if (top + dropdownHeight > viewportHeight) {
          top = buttonRect.top + window.scrollY - dropdownHeight; // Show above the button
        }
  
        setDropdownStyles({
          top,
          left,
          position: "absolute",
        });
  
        setShowDropdown((prev) => !prev);
      }
    };
  
    useEffect(() => {
      const handleOutsideClick = (event: MouseEvent) => {
        if (
          !buttonRef.current?.contains(event.target as Node) &&
          !dropdownRef.current?.contains(event.target as Node) &&
          showDropdown
        ) {
          setShowDropdown(false);
        }
      };
  
      document.addEventListener("mousedown", handleOutsideClick);
      return () => {
        document.removeEventListener("mousedown", handleOutsideClick);
      };
    }, [showDropdown]);
  
    return (
      <>
        <Button
          ref={buttonRef}
          icon={<MoreHorizontalRegular />}
          appearance="transparent"
          onClick={handleButtonClick}
        />
        {showDropdown &&
          createPortal(
            <FluentProvider theme={theme}>
              <Card
                ref={dropdownRef}
                style={{
                  ...dropdownStyles,
                  zIndex: 1000, // Ensure it's above other elements
                  padding: "8px",
                  minWidth: "150px",
                }}
              >
                {items.map((item, index) => (
                  <Button
                  icon={item.icon ? item.icon : null}
                    key={`overflow-${index}`}
                    appearance="transparent"
                    onClick={() => {
                      item.onClick?.();
                      setShowDropdown(false);
                    }}
                  >
                   <Text className={getStyles(item, size)}>{item.label}</Text>
                  </Button>
                ))}
              </Card>
            </FluentProvider>,
            document.body // Append to the body using React Portal
          )}
      </>
    );
  };
  
  export default OverflowMenu;