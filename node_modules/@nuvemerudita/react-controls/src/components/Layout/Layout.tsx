/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from "react";

import { ILayoutConfig, ILayoutProps } from "./ILayoutProps";

import { ResizeObserver } from "@juggle/resize-observer";
import { mergeClasses } from "@fluentui/react-components";
import { useLayoutStyles } from "./useLayoutStyles";

// Default layout configuration
const defaultLayoutConfig: ILayoutConfig = {
  areas: ["header header header", "sidebar content sidebar", "footer footer footer"],
  columns: "1fr 3fr 1fr",
  rows: "auto 1fr auto",
};

export const Layout = (props: React.PropsWithChildren<ILayoutProps & { layoutConfig?: ILayoutConfig }>) => {
  const { className, children, layoutConfig = defaultLayoutConfig } = props;
  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);

  const { rootStyles, layoutGridStyles } = useLayoutStyles({ ...props, layoutConfig });

  const useDebounce = (fn: Function, delay: number) => {
    let timer: NodeJS.Timeout;
    return React.useCallback((...args: any[]) => {
      clearTimeout(timer);
      timer = setTimeout(() => fn(...args), delay);
    }, [fn, delay]);
  };

  const handleResize = useDebounce((width: number, height: number) => {
    setWidth(width);
    setHeight(height);
  }, 200);

  React.useEffect(() => {
    if (!ref.current) return;

    const observer = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const { width, height } = entry.contentRect;
        handleResize(width, height);
      }
    });
    observer.observe(ref.current);

    return () => observer.disconnect();
  }, [handleResize]);

  return (
    <div
      id="-Layout"
      className={mergeClasses(className, layoutGridStyles)}
      style={{
        ...rootStyles(width, height),
        gridTemplateAreas: layoutConfig.areas.join(" "),
        gridTemplateColumns: layoutConfig.columns,
        gridTemplateRows: layoutConfig.rows,
      }}
      ref={ref}
    >
      {React.Children.map(children, (child, index) => {
        if (React.isValidElement(child)) {
          const childElement = child as React.ReactElement;
          return (
            <div
              key={index}
              style={{
                gridArea: childElement.props?.area ?? `area-${index}`, // Fallback to dynamic area
              }}
            >
              {child}
            </div>
          );
        }
        return child;
      })}
    </div>
  );
};
