/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';

import { THorizontalSpacing, TVerticalSpacing } from '../../types';

import { IGridProps } from './IGridProps';
import { useComponentUtils } from '../../utils';

export const useGridStyles = (props: IGridProps) => {
  const { cols, verticalSpacing, horizontalSpacing, styles, gridItemAutoFlow, minItemWidth } = props;
  const { getSpacing, getCurrentDevice, getBaseStyles } = useComponentUtils();

  const gridStyles = React.useCallback(
    (containerWidth: number, containerHeight: number): React.CSSProperties => {
      const baseStyles = getBaseStyles(props, containerWidth, containerHeight);
      const wgapRow = getSpacing<TVerticalSpacing>(verticalSpacing as string, containerWidth, "vertical");
      const wgapCol = getSpacing<THorizontalSpacing>(horizontalSpacing as string, containerWidth, "horizontal");
      const wgap = `${wgapRow} ${wgapCol}`;
      const device = getCurrentDevice(containerWidth);
      let gridTemplateColumns = `repeat(auto-${gridItemAutoFlow ?? "fill"}, minmax(${minItemWidth ?? 250}px, 1fr))`;
      if (cols && cols > 0) {
        let numberCols = cols ?? 0;
        switch (device) {
          case "ExtraSmall":
            numberCols = Math.min(cols, 1);
            break;
          case "Small":
            numberCols = Math.min(cols, 2);
            break;
          case "Medium":
            numberCols = Math.min(cols, 3);
            break;
          case "Large":
            numberCols = Math.min(cols, 4);
            break;
          case "ExtraLarge":
            numberCols = Math.min(cols, 4);
            break;
          case "ExtraExtraLarge":
            numberCols = Math.min(cols, 5);
            break;
          case "XXXLarge":
            numberCols = Math.min(cols, 6);
            break;
          default:
            numberCols = 0;
        }
        gridTemplateColumns = `repeat(${numberCols},  minmax(auto, 1fr))`;
      }

      return {
        ...baseStyles,
        display: "grid",
        gridTemplateColumns: gridTemplateColumns,
        gap: wgap,
        
        
        overflow: "hidden",
       
        ...styles,
      };
    },
    [getBaseStyles, props, getSpacing, verticalSpacing, horizontalSpacing, getCurrentDevice, cols, styles, gridItemAutoFlow, minItemWidth]
  );

  return { gridStyles };
};
