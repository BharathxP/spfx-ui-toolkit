import * as React from 'react';

import { Calendar, DateRangeType } from "@fluentui/react-calendar-compat";

import { css } from '@emotion/css';

const useCalendarStyles = () => {
  return {
    root: css({
      outlineStyle: "none !important", 
    }),
  };
};

interface ICalendarMonthProps {
  onDateChange: (date: Date) => void;
  defaultSelectedDate?: Date;
  onDismiss: () => void;
}

/* const dateStrings = {
  months: [
    "Gennaio",
    "Febbraio",
    "Marzo",
    "Aprile",
    "Maggio",
    "Giugno",
    "Luglio",
    "Agosto",
    "Settembre",
    "Ottobre",
    "Novembre",
    "Dicembre",
  ],
  shortMonths: [
    "Gen",
    "Feb",
    "Mar",
    "Apr",
    "Mag",
    "Giu",
    "Lug",
    "Ago",
    "Set",
    "Ott",
    "Nov",
    "Dic",
  ],
  goToToday: "Vai a oggi",
  days: [
    "Domenica",
    "Lunedì",
    "Martedì",
    "Mercoledì",
    "Giovedì",
    "Venerdì",
    "Sabato",
  ],
  shortDays: [
    "Dom",
    "Lun",
    "Mar",
    "Mer",
    "Gio",
    "Ven",
    "Sab",
  ],
}; */

export const CalendarMonth: React.FunctionComponent<ICalendarMonthProps> = (
  props: React.PropsWithChildren<ICalendarMonthProps>
) => {
  const { onDateChange, defaultSelectedDate, onDismiss } = props;
const styles = useCalendarStyles();
  const [selectedDate, setSelectedDate] = React.useState<Date>((defaultSelectedDate as Date) ?? new Date());

  const onSelectDate = React.useCallback((date: Date, _selectedDateRangeArray?: Date[] | undefined): void => {
    setSelectedDate(date);
    onDateChange(date);
    onDismiss();
  }, []);

  return (
    <>
      <Calendar
        className={styles.root}
        dateRangeType={DateRangeType.Month}
        highlightSelectedMonth
        isDayPickerVisible={false}
        onSelectDate={onSelectDate}
        value={selectedDate}
        onDismiss={onDismiss}
        showGoToToday={false}
        allFocusable={false}
      />
    </>
  );
};
