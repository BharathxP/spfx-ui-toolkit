import * as React from 'react';

import { Calendar, DateRangeType } from '@fluentui/react-calendar-compat'; // Assuming Fluent UI's Calendar is installed
import {
  CalendarMonthFilled,
  CalendarMonthRegular,
  bundleIcon,
} from '@fluentui/react-icons';
import {
  Menu,
  MenuButton,
  MenuList,
  MenuPopover,
  MenuProps,
  MenuTrigger,
} from '@fluentui/react-components';
import { format, utcToZonedTime } from 'date-fns-tz'; // Importing date-fns and timezone utilities

export interface ISelectWeekProps {
  onSelected: (week: { startDate: Date; endDate: Date }) => void; // Now returns start and end dates as Date objects
  value?: Date; // Start date as a Date object
}

const formatWeekLabel = (week: { start: Date; end: Date }) => {
  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const startMonth = format(week.start, 'MMM', { timeZone });
  const endMonth = format(week.end, 'MMM', { timeZone });
  const startYear = format(week.start, 'yyyy', { timeZone });
  const endYear = format(week.end, 'yyyy', { timeZone });

  if (startYear !== endYear) {
    return `${format(week.start, 'dd MMM yyyy', {
      timeZone,
    })} - ${format(week.end, 'dd MMM yyyy', { timeZone })}`;
  } else if (startMonth !== endMonth) {
    return `${format(week.start, 'dd MMM', {
      timeZone,
    })} - ${format(week.end, 'dd MMM yyyy', { timeZone })}`;
  } else {
    return `${format(week.start, 'dd', { timeZone })} - ${format(
      week.end,
      'dd MMM yyyy',
      { timeZone }
    )}`;
  }
};

// Helper function to get the start and end dates of the week
const getWeekRange = (date: Date) => {
  const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  const zonedDate = utcToZonedTime(date, timeZone);

  const start = new Date(zonedDate);
  start.setDate(zonedDate.getDate() - zonedDate.getDay()); // Start of the week (Sunday)

  const end = new Date(start);
  end.setDate(start.getDate() + 6); // End of the week (Saturday)

  return {
    start: utcToZonedTime(start, timeZone),
    end: utcToZonedTime(end, timeZone),
  };
};

export const SelectWeek: React.FunctionComponent<ISelectWeekProps> = React.memo(
  (props: React.PropsWithChildren<ISelectWeekProps>) => {
    const { onSelected, value } = props;

    const dateRangeType: DateRangeType = DateRangeType.Week;

    // State for selected week
    const [selectedDate, setSelectedDate] = React.useState<Date | undefined>(
      value ?? new Date()
    );
    const [selectedWeek, setSelectedWeek] = React.useState<string>(() => {
      const newValue = value ?? new Date();
      if (newValue) {
        const weekRange = getWeekRange(newValue);
        return formatWeekLabel(weekRange);
      }
      return 'Select a week';
    });

    const [open, setOpen] = React.useState(false);

    const onOpenChange: MenuProps['onOpenChange'] = React.useCallback(
      (
        _e: any,
        data: { open: boolean | ((prevState: boolean) => boolean) }
      ) => {
        setOpen(data.open);
      },
      []
    );

    const MonthIcon = React.useMemo(
      () => bundleIcon(CalendarMonthFilled, CalendarMonthRegular),
      []
    );

    const onSelectDate = React.useCallback(
      (date: Date | null | undefined) => {
        if (date) {
          setSelectedDate(date);
          const weekRange = getWeekRange(date);
          const weekLabel = formatWeekLabel(weekRange);

          setSelectedWeek(weekLabel);
          onSelected({ startDate: weekRange.start, endDate: weekRange.end });
          setOpen(false);
        }
      },
      [getWeekRange, formatWeekLabel, onSelected]
    );

    const firstDayOfWeek = React.useMemo(() => 0, []); // Week starts on Sunday

    return (
      <Menu open={open} onOpenChange={onOpenChange}>
        <MenuTrigger disableButtonEnhancement>
          <MenuButton
            shape="circular"
            icon={<MonthIcon />}
            style={{ minWidth: '200px' }}
          >
            {selectedWeek}
          </MenuButton>
        </MenuTrigger>
        <MenuPopover style={{ maxWidth: 'fit-content' }}>
          <MenuList>
            <Calendar
              dateRangeType={dateRangeType}
              highlightSelectedMonth
              showGoToToday
              onSelectDate={onSelectDate}
              value={selectedDate}
              firstDayOfWeek={firstDayOfWeek}
            />
          </MenuList>
        </MenuPopover>
      </Menu>
    );
  }
);
