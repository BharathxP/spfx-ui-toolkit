/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';
import { ResizeObserver } from '@juggle/resize-observer';

import { IBaseProps } from '../baseComponentProps/IBaseProps';
import { useComponentUtils } from '../../utils';

export interface IStackItemProps extends IBaseProps {
  grow?: boolean | number;
  disableShrink?: boolean;
  shrink?: boolean | number | "inherit" | "initial" | "unset";
  alignSelf?: "auto" | "flex-start" | "flex-end" | "center" | "baseline" | "stretch";
  order?: number;
  verticalFill?: boolean;
}

export const StackItem  = (
  props: React.PropsWithChildren<IStackItemProps>
) => {
  const { children, grow, disableShrink, shrink, order, alignSelf, verticalFill } = props;
  const { getBaseStyles } = useComponentUtils();
  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);

  const baseStyles = getBaseStyles(props, width, height);

  React.useEffect(() => {
    let resizeObserver: ResizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
      resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          const { width, height } = entry.contentRect;
          setWidth(width);
          setHeight(height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    }
  }, []);

  const styles: React.CSSProperties = {
    ...baseStyles,
    alignSelf: alignSelf,
    order: order,
    height: verticalFill ? "100%" : "auto",
    flexGrow: grow ? (typeof grow === "boolean" ? 1 : grow) : undefined,
    flexShrink: disableShrink || (!grow && !shrink) ? 0 : 1,
    minWidth: 0,
    minHeight: 0,
    width: "auto",
    
  };

  return (
    <>
      <div ref={ref} style={styles}>
        {children}
      </div>
    </>
  );
};
