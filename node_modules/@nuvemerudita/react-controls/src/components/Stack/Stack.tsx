/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';

import { IStackProps } from './IStackProps';
import { useStackStyles } from './useStackStyles';
import { ResizeObserver } from '@juggle/resize-observer';
export const Stack  = (
  props: React.PropsWithChildren<IStackProps>
) => {
  const { children, className,  } = props;
  const { stackStyles } = useStackStyles(props);
  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);


  React.useEffect(() => {
    let resizeObserver: ResizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container
        resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          const { width, height } = entry.contentRect;
          setWidth(width);
          setHeight(height);
        }
      });
      resizeObserver.observe(ref.current);
    }
    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    }
  }, []);
  return (
    <>
      <div className={className} style={stackStyles(width, height)} ref={ref}>
        {children}
      </div>
    </>
  );
};
