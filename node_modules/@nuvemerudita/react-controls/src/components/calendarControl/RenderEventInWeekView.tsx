/* eslint-disable @typescript-eslint/no-explicit-any */
import * as React from "react";

import { Caption1, mergeClasses } from "@fluentui/react-components";
import {
  differenceInMinutes,
  endOfDay,
  isSameDay,
  parseISO,
  startOfDay,
} from "date-fns";

import { Card } from "../Card";
import { useCalendarStyles } from "./useCalendarStyles";

export interface IRenderEventInWeekViewProps {
  events: {
    title: string;
    start: string;
    end: string;
    participants?: string[];
  }[];
  date: Date;
  columnIndex: number; // Index of the day column
}

interface IEventPosition {
  gridRowStart: number;
  gridRowEnd: number;
  gridColumn: number;
}

export const RenderEventInWeekView: React.FunctionComponent<
  IRenderEventInWeekViewProps
> = (props: React.PropsWithChildren<IRenderEventInWeekViewProps>) => {
  const { events, date, columnIndex } = props;
  const { styles } = useCalendarStyles(props as any);

  const calculateEventPosition = React.useCallback((start: Date, end: Date): IEventPosition => {
    // Get the start of the day
    const dayStart = startOfDay(date);

    // Calculate grid positions based on 30-minute intervals
    const rowStart = differenceInMinutes(start, dayStart) / 30 + 2; // +2 for the grid header rows
    const rowEnd = differenceInMinutes(end, dayStart) / 30 + 2;

    return {
      gridRowStart: Math.max(Math.ceil(rowStart), 2), // Ensure it's within grid bounds
      gridRowEnd: Math.min(Math.ceil(rowEnd), 50), // Ensure it doesn't exceed the grid
      gridColumn: columnIndex + 2, // +2 for time column and blank header
    };
  }, []);

  if (!events || events.length === 0) return null;

  return (
    <>
      {events.map((event, index) => {
        const eventStart = parseISO(event.start);
        const eventEnd = parseISO(event.end);

        // Skip events that are not relevant to this day
        if (!isSameDay(date, eventStart) && !isSameDay(date, eventEnd))
          return null;

        // Adjust event start and end times to align with the current day
        const adjustedStart = isSameDay(date, eventStart)
          ? eventStart
          : startOfDay(date);
        const adjustedEnd = isSameDay(date, eventEnd)
          ? eventEnd
          : endOfDay(date);

        // Calculate grid position for the event
        const position = calculateEventPosition(adjustedStart, adjustedEnd);

        return (
          <Card
            key={index}
            className={mergeClasses(styles.eventCardWeekView)}
            style={{
              gridRowStart: position.gridRowStart,
              gridRowEnd: position.gridRowEnd,
              gridColumn: position.gridColumn,
            }}
            onClick={() => console.log(`Event: ${event.title}`)}
            cardHeader={<Caption1>{event.title}</Caption1>}
          />
        );
      })}
    </>
  );
};
