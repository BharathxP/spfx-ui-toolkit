/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from "react";

import {
  Badge,
  Body1,
  Button,
  Divider,
  Subtitle1,
} from "@fluentui/react-components";
import { format, parseISO } from "date-fns";

import { Card } from "../Card";
import { IEvent } from "./IEvents";
import { RenderLabel } from "../RenderLabel";
import { Stack } from "../Stack";
import { css } from "@emotion/css";

export interface IEventDetailsPopoverProps {
  event: IEvent;

}

const useStyles = (_props?: IEvent) => {
  const styles = {
    banner: css({
      display: "flex",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      padding: `5px 10px 0px 10px`,
    }),
    fieldContainer: css({
      paddingLeft: 32,
    }),
  };
  return { styles };
};

const RenderProperty: React.FC<{
  fieldLabel: string;
  fieldValue: string;
  icon: JSX.Element | string;
}> = ({ fieldLabel, fieldValue, icon }) => {
  const { styles } = useStyles();
  return (
    <Stack>
      <RenderLabel label={fieldLabel} icon={icon} />
      <div className={styles.fieldContainer}>
        <Body1>{fieldValue} </Body1>
      </div>
    </Stack>
  );
};

export const EventDetailsPopover: React.FunctionComponent<
  IEventDetailsPopoverProps
> = (props: React.PropsWithChildren<IEventDetailsPopoverProps>) => {
  const { event,  } = props;
  const { title, start, end, location, category } = event;

  const { styles } = useStyles(event);
  const formatedStartDate = format(parseISO(start), "PPp");
  const formatedEndDate = format(parseISO(end), "PPp");

  return (
    <>
      <Card
        appearance="subtle"
        padding="m"
        paddingTop={"s"}
        width="250px"
        cardBody={
          <Stack RowGap={10}>
            <div className={styles.banner}>
              <Subtitle1>{title}</Subtitle1>
            </div>
            <Divider />
            <Stack horizontal horizontalAlign="end" width={"100%"}>
              <Badge appearance="filled">{category}</Badge>
            </Stack>
            <RenderProperty
              fieldLabel="Start"
              fieldValue={formatedStartDate}
              icon={"mingcute:time-line"}
            />
            <RenderProperty
              fieldLabel="End"
              fieldValue={formatedEndDate}
              icon={"mingcute:time-line"}
            />
            <RenderProperty
              fieldLabel="Location"
              fieldValue={location as string}
              icon={"mingcute:location-line"}
            />
          </Stack>
        }
        cardFooterContent={
          <Stack horizontal horizontalAlign="end" width="100%" >
            <Button appearance="subtle" onClick={() => { console.log('click button')}}>
              Details
            </Button>
          </Stack>
        }
      />
    </>
  );
};
