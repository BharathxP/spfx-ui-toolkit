/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';

import { ICenterProps } from './ICenterProps';
import { ResizeObserver } from '@juggle/resize-observer';
import { useCenterStyles } from './useCenterStyles';

export const Center: React.FC<React.PropsWithChildren<ICenterProps>> = (props) => {
  const { className, children } = props;

  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);
  const { centerStyles } = useCenterStyles(props);

  // Debounce utility function
  const debounce = (func: (...args: any[]) => void, delay: number) => {
    let timeout: NodeJS.Timeout;
    return (...args: any[]) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), delay);
    };
  };

  React.useEffect(() => {
    const handleResize = (entries: any) => {
      for (const entry of entries) {
        const { width, height } = entry.contentRect;
        setWidth(width);
        setHeight(height);
      }
    };

    const debouncedResize = debounce(handleResize, 200);

    const resizeObserver = new ResizeObserver((entries) => {
      debouncedResize(entries);
    });

    if (ref.current) {
      resizeObserver.observe(ref.current);
    }

    return () => {
      resizeObserver.disconnect();
    };
  }, []);

  return (
    <div
      id="center"
      className={className}
      style={{
        ...centerStyles(width, height),
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100%', // Ensures the container takes up the full height
        width: '100%',  // Ensures the container takes up the full width
      }}
      ref={ref}
    >
      {children}
    </div>
  );
};
