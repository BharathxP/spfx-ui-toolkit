/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-use-before-define */
import * as React from 'react';

import {
  FluentProvider,
  IdPrefixProvider,
  Menu,
  MenuButton,
  MenuItem,
  MenuList,
  MenuPopover,
  MenuTrigger,
  Overflow,
  OverflowItem,
  Theme,
  mergeClasses,
  useIsOverflowItemVisible,
  useOverflowMenu,
} from '@fluentui/react-components';
import {
  MoreHorizontalFilled,
  MoreHorizontalRegular,
  bundleIcon,
} from '@fluentui/react-icons';

import { css } from '@emotion/css';

// Styles
const useStyles = () => {
  return {
    container: css({
      display: "flex",
      flexWrap: "nowrap",
      minWidth: 0,
      overflow: "hidden",
      gap: 10,
      marginBottom: 20,
      width: "100%",
    }),
    text1LineStyle: css({
      display: "-webkit-box",
      WebkitLineClamp: 1,
      WebkitBoxOrient: "vertical",
      overflow: "hidden",
      textAlign: "start",
      textOverflow: "ellipsis",
      wordBreak: "break-word",
    }),
    button: css({
      cursor: "pointer",
      minWidth: 107,
    }),
  };
};

// Interfaces
export interface IControlItem {
  id: string;
  name: string;
  icon?: JSX.Element | string;
}

export interface ICustomControlBarProps {
  items: IControlItem[];
  selectedItemId: string | undefined;
  onSelectedItem: (itemId: string) => void;
  renderControl: (item: IControlItem, isSelected: boolean, onClick: () => void) => JSX.Element;
  theme: Theme; // Add theme property
}

// CustomControlBar Component
export const CustomControlBar: React.FunctionComponent<ICustomControlBarProps> = ({
  items,
  selectedItemId,
  onSelectedItem,
  renderControl,
  theme,
}) => {
  const styles = useStyles();
  const onItemSelect = React.useCallback(
    (itemId: string) => {
      if (onSelectedItem) {
        onSelectedItem(itemId);
      }
    },
    [onSelectedItem]
  );

  return (
    <Overflow>
      <FluentProvider theme={theme}>
        {" "}
        {/* Apply theme */}
        <div className={mergeClasses(styles.container)}>
          {items.map((item) => {
            const isSelected = item.id === selectedItemId;
            return (
              <OverflowItem key={item.id} id={item.id} priority={isSelected ? 2 : 1}>
                {renderControl(item, isSelected, () => onItemSelect(item.id))}
              </OverflowItem>
            );
          })}
          <OverflowMenu items={items} onSelectedItem={onItemSelect} theme={theme} /> {/* Pass theme to OverflowMenu */}
        </div>
      </FluentProvider>
    </Overflow>
  );
};

// Overflow Menu and Overflow Menu Item Components
const OverflowMenuItem: React.FunctionComponent<{ item: IControlItem; onSelectedItem: (itemId: string) => void }> = ({
  item,
  onSelectedItem,
}) => {
  const isVisible = useIsOverflowItemVisible(item.id);
  if (isVisible) {
    return null;
  }

  return (
    <MenuItem key={item.id} icon={item.icon} onClick={() => onSelectedItem(item.id)}>
      <div>{item.name}</div>
    </MenuItem>
  );
};

const OverflowMenu: React.FC<{ items: IControlItem[]; onSelectedItem: (itemId: string) => void; theme: Theme }> = ({
  items,
  onSelectedItem,
  theme,
}) => {
  const { ref, overflowCount, isOverflowing } = useOverflowMenu<HTMLButtonElement>();
  const MoreHorizontal = React.useMemo(() => bundleIcon(MoreHorizontalFilled, MoreHorizontalRegular), []);

  if (!isOverflowing) {
    return null;
  }

  return (
    <IdPrefixProvider value="menu-over-">
      <FluentProvider theme={theme}>
      
        <Menu>
          <MenuTrigger disableButtonEnhancement>
            <MenuButton
              appearance="transparent"
              ref={ref}
              icon={<MoreHorizontal />}
              aria-label={`${overflowCount} more options`}
              role="button"
            />
          </MenuTrigger>
          <MenuPopover>
            <MenuList>
              {items.map((item) => (
                <OverflowMenuItem key={item.id} item={item} onSelectedItem={onSelectedItem} />
              ))}
            </MenuList>
          </MenuPopover>
        </Menu>
      </FluentProvider>
    </IdPrefixProvider>
  );
};
