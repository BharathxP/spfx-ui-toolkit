import * as React from 'react';
import { useState } from 'react';

import {
  Dropdown,
  Field,
  Option,
} from '@fluentui/react-components';
import {
  CheckmarkCircle12Filled,
  ErrorCircle12Filled,
  Warning12Filled,
} from '@fluentui/react-icons';

import { IDropdownFieldProps } from './IDropDownFieldProps';
import { IOption } from './IOption';

export const DropdownField: React.FC<IDropdownFieldProps> = ({
  options,
  onChange,
  renderItem,
  validate,
  label,
  placeholder,
  message,
  messageType,
  required,
  size,
  hint,
}) => {
  const [selectedValue, setSelectedValue] = useState<string>("");
  const [error, setError] = useState<string>("");

  const handleSelectionChange = (_event: React.FormEvent<HTMLButtonElement>, option?: IOption): void => {
    const value = option?.value || ""; // Getting the selected value
    setSelectedValue(value);

    // Validate the selected value
    const validationError = validate ? validate(value) : "";
    setError(validationError);

    // Call the onChange callback with the selected value if valid
    if (!validationError && onChange) {
      onChange(value);
    }
  };

  // Memoize the validation state
  const validationState = React.useMemo(() => {
    return error ? "error" : messageType === "warning" ? "warning" : messageType === "info" ? "success" : "none";
  }, [error, messageType]); // Dependencies for memoization

  // Use the custom message if provided, otherwise use the validation error
  const validationMessage = React.useMemo(() => error || message, [error, message]); // Dependencies for memoization

  const getValidationIcon = React.useCallback(() => {
    switch (validationState) {
      case "error":
        return <ErrorCircle12Filled />;
      case "warning":
        return <Warning12Filled />;
      case "success":
        return <CheckmarkCircle12Filled />;
      default:
        return null;
    }
  }, [validationState]);

  return (
    <Field
      label={label}
      required={required}
      validationMessage={validationMessage}
      validationMessageIcon={getValidationIcon()}
      size={size}
      hint={hint}
      validationState={validationState} // Set the validation state
    >
      <Dropdown
        placeholder={placeholder} // Using the placeholder prop here
        onChange={handleSelectionChange}
        value={selectedValue}
      >
        {options.map((option) => (
          <Option
            key={option.value}
            value={option.value}
            disabled={option.disabled}
            checkIcon={option.checkIcon as React.ReactElement}
            as={option.as} // Pass additional properties to Option
            text={option.text || ""}
          >
            {renderItem && renderItem(option)} {/* Render the item using the renderItem function */}
          </Option>
        ))}
      </Dropdown>
    </Field>
  );
};
