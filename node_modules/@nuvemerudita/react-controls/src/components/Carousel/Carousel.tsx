/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';
import { ResizeObserver } from '@juggle/resize-observer';
import useEmblaCarousel from 'embla-carousel-react';

import {
  Button,
  makeStyles,
  mergeClasses,
  Subtitle2,
} from '@fluentui/react-components';
import {
  ChevronLeftRegular,
  ChevronRightRegular,
} from '@fluentui/react-icons';

import { ICarouselProps } from './ICarouselProps';
import { usePrevNextButtons } from './useCarouselButton';
import { useCarouselStyles } from './useCarouselStyles';
import { useCarouselStylesMain } from './useCarouselStylesMain';

const useStyle = makeStyles({
  titleStyles:{
    display: "-webkit-box",
     overflow : "hidden",
    textOverflow: "ellipsis",
    "-webkit-line-clamp": "1",
    "-webkit-box-orient": "vertical",
    textAlign: "start",
    height: "25px",
  }
})

export const Carousel  = (
  props: React.PropsWithChildren<ICarouselProps>
) => {
  const { className, items, title } = props;
  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);
  const { carouselStyles } = useCarouselStylesMain(props);
  const [emblaRef, emblaApi] = useEmblaCarousel();
const styles = useStyle();
  const {
    enableControls,
    embla__slide,
    embla__container,
    embla__viewport,
    embla__buttons,
    
  } = useCarouselStyles(props, width );
  const { prevBtnDisabled, nextBtnDisabled, onPrevButtonClick, onNextButtonClick } = usePrevNextButtons(emblaApi);

  React.useEffect(() => {
    let resizeObserver: ResizeObserver;
    if (ref.current) {
      // observer to detect changes in the size of the container

      resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          const { width, height } = entry.contentRect;
          setWidth(width);
          setHeight(height);
        }
      });
      setWidth(ref.current.clientWidth);
      setHeight(ref.current.clientHeight);
      resizeObserver.observe(ref.current);
    }
    return () => {
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, []);

  return (
    <>
      <div
        id="-carousel"
        className={mergeClasses(className, "embla")}
        style={{ ...carouselStyles(width, height) }}
        ref={ref}
      >
        <div className={enableControls}>
          <Subtitle2
            className={styles.titleStyles}
            
          >
            {title}
          </Subtitle2>

          <div className={embla__buttons}>
            <Button
              onClick={onPrevButtonClick}
              disabled={prevBtnDisabled}
              appearance="subtle"
              icon={<ChevronLeftRegular />}
            />
            <Button
              onClick={onNextButtonClick}
              disabled={nextBtnDisabled}
              appearance="subtle"
              icon={<ChevronRightRegular />}
            />
          </div>
        </div>

        <div className={embla__viewport} ref={emblaRef}>
          <div className={embla__container}>
            {items.map((item, index) => (
              <div className={embla__slide} key={index}>
                {item}
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};
