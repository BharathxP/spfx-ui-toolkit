/* eslint-disable @typescript-eslint/explicit-function-return-type */
import * as React from 'react';

import { Center } from '../Center/Center';
import { IContainerProps } from './IContainerProps';
import { ResizeObserver } from '@juggle/resize-observer';
import debounce from 'lodash.debounce';
import { useContainerStyles } from './useContainerStyles';

export interface IContainerProps {
  className?: string;
  children?: React.ReactNode;
  style?: React.CSSProperties; // Allow custom inline styles
  alignItems?: 'flex-start' | 'center' | 'flex-end' | 'stretch';
  justifyContent?: 'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-around';
  flexDirection?: 'row' | 'column';
  centerContent?: boolean; // Toggle the use of the Center component
}

export const Container: React.FC<React.PropsWithChildren<IContainerProps>> = (props) => {
  const {
    className,
    children,
    style,
    alignItems = 'center',
    justifyContent = 'center',
    flexDirection = 'row',
    centerContent = true,
  } = props;

  const ref = React.useRef<HTMLDivElement>(null);
  const [width, setWidth] = React.useState(0);
  const [height, setHeight] = React.useState(0);
  const { containerStyles } = useContainerStyles(props);

  // Debounced resize handler
  const debouncedResize = React.useMemo(
    () =>
      debounce((entries: ResizeObserverEntry[]) => {
        for (const entry of entries) {
          const { width, height } = entry.contentRect;
          setWidth(width);
          setHeight(height);
        }
      }, 200),
    []
  );

  React.useEffect(() => {
    const resizeObserver = new ResizeObserver((entries) => {
      debouncedResize(entries);
    });

    if (ref.current) {
      resizeObserver.observe(ref.current);
    }

    return () => {
      resizeObserver.disconnect();
      debouncedResize.cancel();
    };
  }, [debouncedResize]);

  return (
    <div
      id="container"
      className={className}
      style={{
        ...containerStyles(width, height),
        display: 'flex',
        justifyContent,
        alignItems,
        flexDirection,
        ...style, // Allow overriding styles via props
      }}
      ref={ref}
    >
      {centerContent ? <Center>{children}</Center> : children}
    </div>
  );
};
